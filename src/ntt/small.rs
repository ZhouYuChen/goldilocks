//! Generated using `cargo run --bin codegen`
#![allow(unused_parens)] // Makes codegen easier
use crate::Field;

/// Apply a small NTT to `values`, or return `false` if the size is not supported.
pub fn small_ntt(values: &mut [Field]) -> bool {
    match values.len() {
        ..=1 => return true,
        2 => ntt_2(values),
        3 => ntt_3(values),
        4 => ntt_4(values),
        6 => ntt_6(values),
        8 => ntt_8(values),
        12 => ntt_12(values),
        16 => ntt_16(values),
        24 => ntt_24(values),
        32 => ntt_32(values),
        48 => ntt_48(values),
        64 => ntt_64(values),
        96 => ntt_96(values),
        128 => ntt_128(values),
        _ => return false,
    }
    true
}

/// Size 2 NTT.
fn ntt_2(values: &mut [Field]) {
    debug_assert_eq!(values.len(), 2);
    let a0 = values[0];
    let a1 = values[1];
    let (a0, a1) = (a0 + a1, a0 - a1);
    values[0] = a0;
    values[1] = a1;
}

/// Size 3 NTT.
fn ntt_3(values: &mut [Field]) {
    debug_assert_eq!(values.len(), 3);
    let a0 = values[0];
    let a1 = values[1];
    let a2 = values[2];
    let (a0, a1, a2) = (a0 + a1 + a2,
        a0 + (a1 << 64) - (a2 << 32),
        a0 - (a1 << 32) + (a2 << 64));
    values[0] = a0;
    values[1] = a1;
    values[2] = a2;
}

/// Size 4 NTT.
fn ntt_4(values: &mut [Field]) {
    debug_assert_eq!(values.len(), 4);
    let a0 = values[0];
    let a1 = values[1];
    let a2 = values[2];
    let a3 = values[3];
    let (a0, a2) = (a0 + a2, a0 - a2);
    let (a1, a3) = (a1 + a3, a1 - a3);
    let a3 = (a3 << 48);
    let (a0, a1) = (a0 + a1, a0 - a1);
    let (a2, a3) = (a2 + a3, a2 - a3);
    values[0] = a0;
    values[1] = a2;
    values[2] = a1;
    values[3] = a3;
}

/// Size 6 NTT.
fn ntt_6(values: &mut [Field]) {
    debug_assert_eq!(values.len(), 6);
    let a0 = values[0];
    let a1 = values[1];
    let a2 = values[2];
    let a3 = values[3];
    let a4 = values[4];
    let a5 = values[5];
    let (a0, a3) = (a0 + a3, a0 - a3);
    let (a1, a4) = (a1 + a4, a1 - a4);
    let (a2, a5) = (a2 + a5, a2 - a5);
    let a4 = (a4 << 32);
    let a5 = (a5 << 64);
    let (a0, a1, a2) = (a0 + a1 + a2,
        a0 + (a1 << 64) - (a2 << 32),
        a0 - (a1 << 32) + (a2 << 64));
    let (a3, a4, a5) = (a3 + a4 + a5,
        a3 + (a4 << 64) - (a5 << 32),
        a3 - (a4 << 32) + (a5 << 64));
    values[0] = a0;
    values[1] = a3;
    values[2] = a1;
    values[3] = a4;
    values[4] = a2;
    values[5] = a5;
}

/// Size 8 NTT.
fn ntt_8(values: &mut [Field]) {
    debug_assert_eq!(values.len(), 8);
    let a0 = values[0];
    let a1 = values[1];
    let a2 = values[2];
    let a3 = values[3];
    let a4 = values[4];
    let a5 = values[5];
    let a6 = values[6];
    let a7 = values[7];
    let (a0, a4) = (a0 + a4, a0 - a4);
    let (a1, a5) = (a1 + a5, a1 - a5);
    let (a2, a6) = (a2 + a6, a2 - a6);
    let (a3, a7) = (a3 + a7, a3 - a7);
    let a5 = (a5 << 24);
    let a6 = (a6 << 48);
    let a7 = (a7 << 72);
    let (a0, a2) = (a0 + a2, a0 - a2);
    let (a1, a3) = (a1 + a3, a1 - a3);
    let a3 = (a3 << 48);
    let (a0, a1) = (a0 + a1, a0 - a1);
    let (a2, a3) = (a2 + a3, a2 - a3);
    let (a4, a6) = (a4 + a6, a4 - a6);
    let (a5, a7) = (a5 + a7, a5 - a7);
    let a7 = (a7 << 48);
    let (a4, a5) = (a4 + a5, a4 - a5);
    let (a6, a7) = (a6 + a7, a6 - a7);
    values[0] = a0;
    values[1] = a4;
    values[2] = a2;
    values[3] = a6;
    values[4] = a1;
    values[5] = a5;
    values[6] = a3;
    values[7] = a7;
}

/// Size 12 NTT.
fn ntt_12(values: &mut [Field]) {
    debug_assert_eq!(values.len(), 12);
    let a0 = values[0];
    let a1 = values[1];
    let a2 = values[2];
    let a3 = values[3];
    let a4 = values[4];
    let a5 = values[5];
    let a6 = values[6];
    let a7 = values[7];
    let a8 = values[8];
    let a9 = values[9];
    let a10 = values[10];
    let a11 = values[11];
    let (a0, a4, a8) = (a0 + a4 + a8,
        a0 + (a4 << 64) - (a8 << 32),
        a0 - (a4 << 32) + (a8 << 64));
    let (a1, a5, a9) = (a1 + a5 + a9,
        a1 + (a5 << 64) - (a9 << 32),
        a1 - (a5 << 32) + (a9 << 64));
    let (a2, a6, a10) = (a2 + a6 + a10,
        a2 + (a6 << 64) - (a10 << 32),
        a2 - (a6 << 32) + (a10 << 64));
    let (a3, a7, a11) = (a3 + a7 + a11,
        a3 + (a7 << 64) - (a11 << 32),
        a3 - (a7 << 32) + (a11 << 64));
    let a5 = (a5 << 16);
    let a9 = (a9 << 32);
    let a6 = (a6 << 32);
    let a10 = (a10 << 64);
    let a7 = (a7 << 48);
    let a11 = (-a11);
    let (a0, a2) = (a0 + a2, a0 - a2);
    let (a1, a3) = (a1 + a3, a1 - a3);
    let a3 = (a3 << 48);
    let (a0, a1) = (a0 + a1, a0 - a1);
    let (a2, a3) = (a2 + a3, a2 - a3);
    let (a4, a6) = (a4 + a6, a4 - a6);
    let (a5, a7) = (a5 + a7, a5 - a7);
    let a7 = (a7 << 48);
    let (a4, a5) = (a4 + a5, a4 - a5);
    let (a6, a7) = (a6 + a7, a6 - a7);
    let (a8, a10) = (a8 + a10, a8 - a10);
    let (a9, a11) = (a9 + a11, a9 - a11);
    let a11 = (a11 << 48);
    let (a8, a9) = (a8 + a9, a8 - a9);
    let (a10, a11) = (a10 + a11, a10 - a11);
    values[0] = a0;
    values[1] = a4;
    values[2] = a8;
    values[3] = a2;
    values[4] = a6;
    values[5] = a10;
    values[6] = a1;
    values[7] = a5;
    values[8] = a9;
    values[9] = a3;
    values[10] = a7;
    values[11] = a11;
}

/// Size 16 NTT.
fn ntt_16(values: &mut [Field]) {
    debug_assert_eq!(values.len(), 16);
    let a0 = values[0];
    let a1 = values[1];
    let a2 = values[2];
    let a3 = values[3];
    let a4 = values[4];
    let a5 = values[5];
    let a6 = values[6];
    let a7 = values[7];
    let a8 = values[8];
    let a9 = values[9];
    let a10 = values[10];
    let a11 = values[11];
    let a12 = values[12];
    let a13 = values[13];
    let a14 = values[14];
    let a15 = values[15];
    let (a0, a8) = (a0 + a8, a0 - a8);
    let (a4, a12) = (a4 + a12, a4 - a12);
    let a12 = (a12 << 48);
    let (a0, a4) = (a0 + a4, a0 - a4);
    let (a8, a12) = (a8 + a12, a8 - a12);
    let (a1, a9) = (a1 + a9, a1 - a9);
    let (a5, a13) = (a5 + a13, a5 - a13);
    let a13 = (a13 << 48);
    let (a1, a5) = (a1 + a5, a1 - a5);
    let (a9, a13) = (a9 + a13, a9 - a13);
    let (a2, a10) = (a2 + a10, a2 - a10);
    let (a6, a14) = (a6 + a14, a6 - a14);
    let a14 = (a14 << 48);
    let (a2, a6) = (a2 + a6, a2 - a6);
    let (a10, a14) = (a10 + a14, a10 - a14);
    let (a3, a11) = (a3 + a11, a3 - a11);
    let (a7, a15) = (a7 + a15, a7 - a15);
    let a15 = (a15 << 48);
    let (a3, a7) = (a3 + a7, a3 - a7);
    let (a11, a15) = (a11 + a15, a11 - a15);
    let a9 = (a9 << 12);
    let a5 = (a5 << 24);
    let a13 = (a13 << 36);
    let a10 = (a10 << 24);
    let a6 = (a6 << 48);
    let a14 = (a14 << 72);
    let a11 = (a11 << 36);
    let a7 = (a7 << 72);
    let a15 = (-(a15 << 12));
    let (a0, a2) = (a0 + a2, a0 - a2);
    let (a1, a3) = (a1 + a3, a1 - a3);
    let a3 = (a3 << 48);
    let (a0, a1) = (a0 + a1, a0 - a1);
    let (a2, a3) = (a2 + a3, a2 - a3);
    let (a8, a10) = (a8 + a10, a8 - a10);
    let (a9, a11) = (a9 + a11, a9 - a11);
    let a11 = (a11 << 48);
    let (a8, a9) = (a8 + a9, a8 - a9);
    let (a10, a11) = (a10 + a11, a10 - a11);
    let (a4, a6) = (a4 + a6, a4 - a6);
    let (a5, a7) = (a5 + a7, a5 - a7);
    let a7 = (a7 << 48);
    let (a4, a5) = (a4 + a5, a4 - a5);
    let (a6, a7) = (a6 + a7, a6 - a7);
    let (a12, a14) = (a12 + a14, a12 - a14);
    let (a13, a15) = (a13 + a15, a13 - a15);
    let a15 = (a15 << 48);
    let (a12, a13) = (a12 + a13, a12 - a13);
    let (a14, a15) = (a14 + a15, a14 - a15);
    values[0] = a0;
    values[1] = a8;
    values[2] = a4;
    values[3] = a12;
    values[4] = a2;
    values[5] = a10;
    values[6] = a6;
    values[7] = a14;
    values[8] = a1;
    values[9] = a9;
    values[10] = a5;
    values[11] = a13;
    values[12] = a3;
    values[13] = a11;
    values[14] = a7;
    values[15] = a15;
}

/// Size 24 NTT.
fn ntt_24(values: &mut [Field]) {
    debug_assert_eq!(values.len(), 24);
    let a0 = values[0];
    let a1 = values[1];
    let a2 = values[2];
    let a3 = values[3];
    let a4 = values[4];
    let a5 = values[5];
    let a6 = values[6];
    let a7 = values[7];
    let a8 = values[8];
    let a9 = values[9];
    let a10 = values[10];
    let a11 = values[11];
    let a12 = values[12];
    let a13 = values[13];
    let a14 = values[14];
    let a15 = values[15];
    let a16 = values[16];
    let a17 = values[17];
    let a18 = values[18];
    let a19 = values[19];
    let a20 = values[20];
    let a21 = values[21];
    let a22 = values[22];
    let a23 = values[23];
    let (a0, a12) = (a0 + a12, a0 - a12);
    let (a6, a18) = (a6 + a18, a6 - a18);
    let a18 = (a18 << 48);
    let (a0, a6) = (a0 + a6, a0 - a6);
    let (a12, a18) = (a12 + a18, a12 - a18);
    let (a1, a13) = (a1 + a13, a1 - a13);
    let (a7, a19) = (a7 + a19, a7 - a19);
    let a19 = (a19 << 48);
    let (a1, a7) = (a1 + a7, a1 - a7);
    let (a13, a19) = (a13 + a19, a13 - a19);
    let (a2, a14) = (a2 + a14, a2 - a14);
    let (a8, a20) = (a8 + a20, a8 - a20);
    let a20 = (a20 << 48);
    let (a2, a8) = (a2 + a8, a2 - a8);
    let (a14, a20) = (a14 + a20, a14 - a20);
    let (a3, a15) = (a3 + a15, a3 - a15);
    let (a9, a21) = (a9 + a21, a9 - a21);
    let a21 = (a21 << 48);
    let (a3, a9) = (a3 + a9, a3 - a9);
    let (a15, a21) = (a15 + a21, a15 - a21);
    let (a4, a16) = (a4 + a16, a4 - a16);
    let (a10, a22) = (a10 + a22, a10 - a22);
    let a22 = (a22 << 48);
    let (a4, a10) = (a4 + a10, a4 - a10);
    let (a16, a22) = (a16 + a22, a16 - a22);
    let (a5, a17) = (a5 + a17, a5 - a17);
    let (a11, a23) = (a11 + a23, a11 - a23);
    let a23 = (a23 << 48);
    let (a5, a11) = (a5 + a11, a5 - a11);
    let (a17, a23) = (a17 + a23, a17 - a23);
    let a13 = (a13 << 8);
    let a7 = (a7 << 16);
    let a19 = (a19 << 24);
    let a14 = (a14 << 16);
    let a8 = (a8 << 32);
    let a20 = (a20 << 48);
    let a15 = (a15 << 24);
    let a9 = (a9 << 48);
    let a21 = (a21 << 72);
    let a16 = (a16 << 32);
    let a10 = (a10 << 64);
    let a22 = (-a22);
    let a17 = (a17 << 40);
    let a11 = (a11 << 80);
    let a23 = (-(a23 << 24));
    let (a0, a3) = (a0 + a3, a0 - a3);
    let (a1, a4) = (a1 + a4, a1 - a4);
    let (a2, a5) = (a2 + a5, a2 - a5);
    let a4 = (a4 << 32);
    let a5 = (a5 << 64);
    let (a0, a1, a2) = (a0 + a1 + a2,
        a0 + (a1 << 64) - (a2 << 32),
        a0 - (a1 << 32) + (a2 << 64));
    let (a3, a4, a5) = (a3 + a4 + a5,
        a3 + (a4 << 64) - (a5 << 32),
        a3 - (a4 << 32) + (a5 << 64));
    let (a12, a15) = (a12 + a15, a12 - a15);
    let (a13, a16) = (a13 + a16, a13 - a16);
    let (a14, a17) = (a14 + a17, a14 - a17);
    let a16 = (a16 << 32);
    let a17 = (a17 << 64);
    let (a12, a13, a14) = (a12 + a13 + a14,
        a12 + (a13 << 64) - (a14 << 32),
        a12 - (a13 << 32) + (a14 << 64));
    let (a15, a16, a17) = (a15 + a16 + a17,
        a15 + (a16 << 64) - (a17 << 32),
        a15 - (a16 << 32) + (a17 << 64));
    let (a6, a9) = (a6 + a9, a6 - a9);
    let (a7, a10) = (a7 + a10, a7 - a10);
    let (a8, a11) = (a8 + a11, a8 - a11);
    let a10 = (a10 << 32);
    let a11 = (a11 << 64);
    let (a6, a7, a8) = (a6 + a7 + a8,
        a6 + (a7 << 64) - (a8 << 32),
        a6 - (a7 << 32) + (a8 << 64));
    let (a9, a10, a11) = (a9 + a10 + a11,
        a9 + (a10 << 64) - (a11 << 32),
        a9 - (a10 << 32) + (a11 << 64));
    let (a18, a21) = (a18 + a21, a18 - a21);
    let (a19, a22) = (a19 + a22, a19 - a22);
    let (a20, a23) = (a20 + a23, a20 - a23);
    let a22 = (a22 << 32);
    let a23 = (a23 << 64);
    let (a18, a19, a20) = (a18 + a19 + a20,
        a18 + (a19 << 64) - (a20 << 32),
        a18 - (a19 << 32) + (a20 << 64));
    let (a21, a22, a23) = (a21 + a22 + a23,
        a21 + (a22 << 64) - (a23 << 32),
        a21 - (a22 << 32) + (a23 << 64));
    values[0] = a0;
    values[1] = a12;
    values[2] = a6;
    values[3] = a18;
    values[4] = a3;
    values[5] = a15;
    values[6] = a9;
    values[7] = a21;
    values[8] = a1;
    values[9] = a13;
    values[10] = a7;
    values[11] = a19;
    values[12] = a4;
    values[13] = a16;
    values[14] = a10;
    values[15] = a22;
    values[16] = a2;
    values[17] = a14;
    values[18] = a8;
    values[19] = a20;
    values[20] = a5;
    values[21] = a17;
    values[22] = a11;
    values[23] = a23;
}

/// Size 32 NTT.
fn ntt_32(values: &mut [Field]) {
    debug_assert_eq!(values.len(), 32);
    let a0 = values[0];
    let a1 = values[1];
    let a2 = values[2];
    let a3 = values[3];
    let a4 = values[4];
    let a5 = values[5];
    let a6 = values[6];
    let a7 = values[7];
    let a8 = values[8];
    let a9 = values[9];
    let a10 = values[10];
    let a11 = values[11];
    let a12 = values[12];
    let a13 = values[13];
    let a14 = values[14];
    let a15 = values[15];
    let a16 = values[16];
    let a17 = values[17];
    let a18 = values[18];
    let a19 = values[19];
    let a20 = values[20];
    let a21 = values[21];
    let a22 = values[22];
    let a23 = values[23];
    let a24 = values[24];
    let a25 = values[25];
    let a26 = values[26];
    let a27 = values[27];
    let a28 = values[28];
    let a29 = values[29];
    let a30 = values[30];
    let a31 = values[31];
    let (a0, a16) = (a0 + a16, a0 - a16);
    let (a8, a24) = (a8 + a24, a8 - a24);
    let a24 = (a24 << 48);
    let (a0, a8) = (a0 + a8, a0 - a8);
    let (a16, a24) = (a16 + a24, a16 - a24);
    let (a1, a17) = (a1 + a17, a1 - a17);
    let (a9, a25) = (a9 + a25, a9 - a25);
    let a25 = (a25 << 48);
    let (a1, a9) = (a1 + a9, a1 - a9);
    let (a17, a25) = (a17 + a25, a17 - a25);
    let (a2, a18) = (a2 + a18, a2 - a18);
    let (a10, a26) = (a10 + a26, a10 - a26);
    let a26 = (a26 << 48);
    let (a2, a10) = (a2 + a10, a2 - a10);
    let (a18, a26) = (a18 + a26, a18 - a26);
    let (a3, a19) = (a3 + a19, a3 - a19);
    let (a11, a27) = (a11 + a27, a11 - a27);
    let a27 = (a27 << 48);
    let (a3, a11) = (a3 + a11, a3 - a11);
    let (a19, a27) = (a19 + a27, a19 - a27);
    let (a4, a20) = (a4 + a20, a4 - a20);
    let (a12, a28) = (a12 + a28, a12 - a28);
    let a28 = (a28 << 48);
    let (a4, a12) = (a4 + a12, a4 - a12);
    let (a20, a28) = (a20 + a28, a20 - a28);
    let (a5, a21) = (a5 + a21, a5 - a21);
    let (a13, a29) = (a13 + a29, a13 - a29);
    let a29 = (a29 << 48);
    let (a5, a13) = (a5 + a13, a5 - a13);
    let (a21, a29) = (a21 + a29, a21 - a29);
    let (a6, a22) = (a6 + a22, a6 - a22);
    let (a14, a30) = (a14 + a30, a14 - a30);
    let a30 = (a30 << 48);
    let (a6, a14) = (a6 + a14, a6 - a14);
    let (a22, a30) = (a22 + a30, a22 - a30);
    let (a7, a23) = (a7 + a23, a7 - a23);
    let (a15, a31) = (a15 + a31, a15 - a31);
    let a31 = (a31 << 48);
    let (a7, a15) = (a7 + a15, a7 - a15);
    let (a23, a31) = (a23 + a31, a23 - a31);
    let a17 = (a17 << 6);
    let a9 = (a9 << 12);
    let a25 = (a25 << 18);
    let a18 = (a18 << 12);
    let a10 = (a10 << 24);
    let a26 = (a26 << 36);
    let a19 = (a19 << 18);
    let a11 = (a11 << 36);
    let a27 = (a27 << 54);
    let a20 = (a20 << 24);
    let a12 = (a12 << 48);
    let a28 = (a28 << 72);
    let a21 = (a21 << 30);
    let a13 = (a13 << 60);
    let a29 = (a29 << 90);
    let a22 = (a22 << 36);
    let a14 = (a14 << 72);
    let a30 = (-(a30 << 12));
    let a23 = (a23 << 42);
    let a15 = (a15 << 84);
    let a31 = (-(a31 << 30));
    let (a0, a4) = (a0 + a4, a0 - a4);
    let (a1, a5) = (a1 + a5, a1 - a5);
    let (a2, a6) = (a2 + a6, a2 - a6);
    let (a3, a7) = (a3 + a7, a3 - a7);
    let a5 = (a5 << 24);
    let a6 = (a6 << 48);
    let a7 = (a7 << 72);
    let (a0, a2) = (a0 + a2, a0 - a2);
    let (a1, a3) = (a1 + a3, a1 - a3);
    let a3 = (a3 << 48);
    let (a0, a1) = (a0 + a1, a0 - a1);
    let (a2, a3) = (a2 + a3, a2 - a3);
    let (a4, a6) = (a4 + a6, a4 - a6);
    let (a5, a7) = (a5 + a7, a5 - a7);
    let a7 = (a7 << 48);
    let (a4, a5) = (a4 + a5, a4 - a5);
    let (a6, a7) = (a6 + a7, a6 - a7);
    let (a16, a20) = (a16 + a20, a16 - a20);
    let (a17, a21) = (a17 + a21, a17 - a21);
    let (a18, a22) = (a18 + a22, a18 - a22);
    let (a19, a23) = (a19 + a23, a19 - a23);
    let a21 = (a21 << 24);
    let a22 = (a22 << 48);
    let a23 = (a23 << 72);
    let (a16, a18) = (a16 + a18, a16 - a18);
    let (a17, a19) = (a17 + a19, a17 - a19);
    let a19 = (a19 << 48);
    let (a16, a17) = (a16 + a17, a16 - a17);
    let (a18, a19) = (a18 + a19, a18 - a19);
    let (a20, a22) = (a20 + a22, a20 - a22);
    let (a21, a23) = (a21 + a23, a21 - a23);
    let a23 = (a23 << 48);
    let (a20, a21) = (a20 + a21, a20 - a21);
    let (a22, a23) = (a22 + a23, a22 - a23);
    let (a8, a12) = (a8 + a12, a8 - a12);
    let (a9, a13) = (a9 + a13, a9 - a13);
    let (a10, a14) = (a10 + a14, a10 - a14);
    let (a11, a15) = (a11 + a15, a11 - a15);
    let a13 = (a13 << 24);
    let a14 = (a14 << 48);
    let a15 = (a15 << 72);
    let (a8, a10) = (a8 + a10, a8 - a10);
    let (a9, a11) = (a9 + a11, a9 - a11);
    let a11 = (a11 << 48);
    let (a8, a9) = (a8 + a9, a8 - a9);
    let (a10, a11) = (a10 + a11, a10 - a11);
    let (a12, a14) = (a12 + a14, a12 - a14);
    let (a13, a15) = (a13 + a15, a13 - a15);
    let a15 = (a15 << 48);
    let (a12, a13) = (a12 + a13, a12 - a13);
    let (a14, a15) = (a14 + a15, a14 - a15);
    let (a24, a28) = (a24 + a28, a24 - a28);
    let (a25, a29) = (a25 + a29, a25 - a29);
    let (a26, a30) = (a26 + a30, a26 - a30);
    let (a27, a31) = (a27 + a31, a27 - a31);
    let a29 = (a29 << 24);
    let a30 = (a30 << 48);
    let a31 = (a31 << 72);
    let (a24, a26) = (a24 + a26, a24 - a26);
    let (a25, a27) = (a25 + a27, a25 - a27);
    let a27 = (a27 << 48);
    let (a24, a25) = (a24 + a25, a24 - a25);
    let (a26, a27) = (a26 + a27, a26 - a27);
    let (a28, a30) = (a28 + a30, a28 - a30);
    let (a29, a31) = (a29 + a31, a29 - a31);
    let a31 = (a31 << 48);
    let (a28, a29) = (a28 + a29, a28 - a29);
    let (a30, a31) = (a30 + a31, a30 - a31);
    values[0] = a0;
    values[1] = a16;
    values[2] = a8;
    values[3] = a24;
    values[4] = a4;
    values[5] = a20;
    values[6] = a12;
    values[7] = a28;
    values[8] = a2;
    values[9] = a18;
    values[10] = a10;
    values[11] = a26;
    values[12] = a6;
    values[13] = a22;
    values[14] = a14;
    values[15] = a30;
    values[16] = a1;
    values[17] = a17;
    values[18] = a9;
    values[19] = a25;
    values[20] = a5;
    values[21] = a21;
    values[22] = a13;
    values[23] = a29;
    values[24] = a3;
    values[25] = a19;
    values[26] = a11;
    values[27] = a27;
    values[28] = a7;
    values[29] = a23;
    values[30] = a15;
    values[31] = a31;
}

/// Size 48 NTT.
fn ntt_48(values: &mut [Field]) {
    debug_assert_eq!(values.len(), 48);
    let a0 = values[0];
    let a1 = values[1];
    let a2 = values[2];
    let a3 = values[3];
    let a4 = values[4];
    let a5 = values[5];
    let a6 = values[6];
    let a7 = values[7];
    let a8 = values[8];
    let a9 = values[9];
    let a10 = values[10];
    let a11 = values[11];
    let a12 = values[12];
    let a13 = values[13];
    let a14 = values[14];
    let a15 = values[15];
    let a16 = values[16];
    let a17 = values[17];
    let a18 = values[18];
    let a19 = values[19];
    let a20 = values[20];
    let a21 = values[21];
    let a22 = values[22];
    let a23 = values[23];
    let a24 = values[24];
    let a25 = values[25];
    let a26 = values[26];
    let a27 = values[27];
    let a28 = values[28];
    let a29 = values[29];
    let a30 = values[30];
    let a31 = values[31];
    let a32 = values[32];
    let a33 = values[33];
    let a34 = values[34];
    let a35 = values[35];
    let a36 = values[36];
    let a37 = values[37];
    let a38 = values[38];
    let a39 = values[39];
    let a40 = values[40];
    let a41 = values[41];
    let a42 = values[42];
    let a43 = values[43];
    let a44 = values[44];
    let a45 = values[45];
    let a46 = values[46];
    let a47 = values[47];
    let (a0, a24) = (a0 + a24, a0 - a24);
    let (a8, a32) = (a8 + a32, a8 - a32);
    let (a16, a40) = (a16 + a40, a16 - a40);
    let a32 = (a32 << 32);
    let a40 = (a40 << 64);
    let (a0, a8, a16) = (a0 + a8 + a16,
        a0 + (a8 << 64) - (a16 << 32),
        a0 - (a8 << 32) + (a16 << 64));
    let (a24, a32, a40) = (a24 + a32 + a40,
        a24 + (a32 << 64) - (a40 << 32),
        a24 - (a32 << 32) + (a40 << 64));
    let (a1, a25) = (a1 + a25, a1 - a25);
    let (a9, a33) = (a9 + a33, a9 - a33);
    let (a17, a41) = (a17 + a41, a17 - a41);
    let a33 = (a33 << 32);
    let a41 = (a41 << 64);
    let (a1, a9, a17) = (a1 + a9 + a17,
        a1 + (a9 << 64) - (a17 << 32),
        a1 - (a9 << 32) + (a17 << 64));
    let (a25, a33, a41) = (a25 + a33 + a41,
        a25 + (a33 << 64) - (a41 << 32),
        a25 - (a33 << 32) + (a41 << 64));
    let (a2, a26) = (a2 + a26, a2 - a26);
    let (a10, a34) = (a10 + a34, a10 - a34);
    let (a18, a42) = (a18 + a42, a18 - a42);
    let a34 = (a34 << 32);
    let a42 = (a42 << 64);
    let (a2, a10, a18) = (a2 + a10 + a18,
        a2 + (a10 << 64) - (a18 << 32),
        a2 - (a10 << 32) + (a18 << 64));
    let (a26, a34, a42) = (a26 + a34 + a42,
        a26 + (a34 << 64) - (a42 << 32),
        a26 - (a34 << 32) + (a42 << 64));
    let (a3, a27) = (a3 + a27, a3 - a27);
    let (a11, a35) = (a11 + a35, a11 - a35);
    let (a19, a43) = (a19 + a43, a19 - a43);
    let a35 = (a35 << 32);
    let a43 = (a43 << 64);
    let (a3, a11, a19) = (a3 + a11 + a19,
        a3 + (a11 << 64) - (a19 << 32),
        a3 - (a11 << 32) + (a19 << 64));
    let (a27, a35, a43) = (a27 + a35 + a43,
        a27 + (a35 << 64) - (a43 << 32),
        a27 - (a35 << 32) + (a43 << 64));
    let (a4, a28) = (a4 + a28, a4 - a28);
    let (a12, a36) = (a12 + a36, a12 - a36);
    let (a20, a44) = (a20 + a44, a20 - a44);
    let a36 = (a36 << 32);
    let a44 = (a44 << 64);
    let (a4, a12, a20) = (a4 + a12 + a20,
        a4 + (a12 << 64) - (a20 << 32),
        a4 - (a12 << 32) + (a20 << 64));
    let (a28, a36, a44) = (a28 + a36 + a44,
        a28 + (a36 << 64) - (a44 << 32),
        a28 - (a36 << 32) + (a44 << 64));
    let (a5, a29) = (a5 + a29, a5 - a29);
    let (a13, a37) = (a13 + a37, a13 - a37);
    let (a21, a45) = (a21 + a45, a21 - a45);
    let a37 = (a37 << 32);
    let a45 = (a45 << 64);
    let (a5, a13, a21) = (a5 + a13 + a21,
        a5 + (a13 << 64) - (a21 << 32),
        a5 - (a13 << 32) + (a21 << 64));
    let (a29, a37, a45) = (a29 + a37 + a45,
        a29 + (a37 << 64) - (a45 << 32),
        a29 - (a37 << 32) + (a45 << 64));
    let (a6, a30) = (a6 + a30, a6 - a30);
    let (a14, a38) = (a14 + a38, a14 - a38);
    let (a22, a46) = (a22 + a46, a22 - a46);
    let a38 = (a38 << 32);
    let a46 = (a46 << 64);
    let (a6, a14, a22) = (a6 + a14 + a22,
        a6 + (a14 << 64) - (a22 << 32),
        a6 - (a14 << 32) + (a22 << 64));
    let (a30, a38, a46) = (a30 + a38 + a46,
        a30 + (a38 << 64) - (a46 << 32),
        a30 - (a38 << 32) + (a46 << 64));
    let (a7, a31) = (a7 + a31, a7 - a31);
    let (a15, a39) = (a15 + a39, a15 - a39);
    let (a23, a47) = (a23 + a47, a23 - a47);
    let a39 = (a39 << 32);
    let a47 = (a47 << 64);
    let (a7, a15, a23) = (a7 + a15 + a23,
        a7 + (a15 << 64) - (a23 << 32),
        a7 - (a15 << 32) + (a23 << 64));
    let (a31, a39, a47) = (a31 + a39 + a47,
        a31 + (a39 << 64) - (a47 << 32),
        a31 - (a39 << 32) + (a47 << 64));
    let a25 = (a25 << 4);
    let a9 = (a9 << 8);
    let a33 = (a33 << 12);
    let a17 = (a17 << 16);
    let a41 = (a41 << 20);
    let a26 = (a26 << 8);
    let a10 = (a10 << 16);
    let a34 = (a34 << 24);
    let a18 = (a18 << 32);
    let a42 = (a42 << 40);
    let a27 = (a27 << 12);
    let a11 = (a11 << 24);
    let a35 = (a35 << 36);
    let a19 = (a19 << 48);
    let a43 = (a43 << 60);
    let a28 = (a28 << 16);
    let a12 = (a12 << 32);
    let a36 = (a36 << 48);
    let a20 = (a20 << 64);
    let a44 = (a44 << 80);
    let a29 = (a29 << 20);
    let a13 = (a13 << 40);
    let a37 = (a37 << 60);
    let a21 = (a21 << 80);
    let a45 = (-(a45 << 4));
    let a30 = (a30 << 24);
    let a14 = (a14 << 48);
    let a38 = (a38 << 72);
    let a22 = (-a22);
    let a46 = (-(a46 << 24));
    let a31 = (a31 << 28);
    let a15 = (a15 << 56);
    let a39 = (a39 << 84);
    let a23 = (-(a23 << 16));
    let a47 = (-(a47 << 44));
    let (a0, a4) = (a0 + a4, a0 - a4);
    let (a1, a5) = (a1 + a5, a1 - a5);
    let (a2, a6) = (a2 + a6, a2 - a6);
    let (a3, a7) = (a3 + a7, a3 - a7);
    let a5 = (a5 << 24);
    let a6 = (a6 << 48);
    let a7 = (a7 << 72);
    let (a0, a2) = (a0 + a2, a0 - a2);
    let (a1, a3) = (a1 + a3, a1 - a3);
    let a3 = (a3 << 48);
    let (a0, a1) = (a0 + a1, a0 - a1);
    let (a2, a3) = (a2 + a3, a2 - a3);
    let (a4, a6) = (a4 + a6, a4 - a6);
    let (a5, a7) = (a5 + a7, a5 - a7);
    let a7 = (a7 << 48);
    let (a4, a5) = (a4 + a5, a4 - a5);
    let (a6, a7) = (a6 + a7, a6 - a7);
    let (a24, a28) = (a24 + a28, a24 - a28);
    let (a25, a29) = (a25 + a29, a25 - a29);
    let (a26, a30) = (a26 + a30, a26 - a30);
    let (a27, a31) = (a27 + a31, a27 - a31);
    let a29 = (a29 << 24);
    let a30 = (a30 << 48);
    let a31 = (a31 << 72);
    let (a24, a26) = (a24 + a26, a24 - a26);
    let (a25, a27) = (a25 + a27, a25 - a27);
    let a27 = (a27 << 48);
    let (a24, a25) = (a24 + a25, a24 - a25);
    let (a26, a27) = (a26 + a27, a26 - a27);
    let (a28, a30) = (a28 + a30, a28 - a30);
    let (a29, a31) = (a29 + a31, a29 - a31);
    let a31 = (a31 << 48);
    let (a28, a29) = (a28 + a29, a28 - a29);
    let (a30, a31) = (a30 + a31, a30 - a31);
    let (a8, a12) = (a8 + a12, a8 - a12);
    let (a9, a13) = (a9 + a13, a9 - a13);
    let (a10, a14) = (a10 + a14, a10 - a14);
    let (a11, a15) = (a11 + a15, a11 - a15);
    let a13 = (a13 << 24);
    let a14 = (a14 << 48);
    let a15 = (a15 << 72);
    let (a8, a10) = (a8 + a10, a8 - a10);
    let (a9, a11) = (a9 + a11, a9 - a11);
    let a11 = (a11 << 48);
    let (a8, a9) = (a8 + a9, a8 - a9);
    let (a10, a11) = (a10 + a11, a10 - a11);
    let (a12, a14) = (a12 + a14, a12 - a14);
    let (a13, a15) = (a13 + a15, a13 - a15);
    let a15 = (a15 << 48);
    let (a12, a13) = (a12 + a13, a12 - a13);
    let (a14, a15) = (a14 + a15, a14 - a15);
    let (a32, a36) = (a32 + a36, a32 - a36);
    let (a33, a37) = (a33 + a37, a33 - a37);
    let (a34, a38) = (a34 + a38, a34 - a38);
    let (a35, a39) = (a35 + a39, a35 - a39);
    let a37 = (a37 << 24);
    let a38 = (a38 << 48);
    let a39 = (a39 << 72);
    let (a32, a34) = (a32 + a34, a32 - a34);
    let (a33, a35) = (a33 + a35, a33 - a35);
    let a35 = (a35 << 48);
    let (a32, a33) = (a32 + a33, a32 - a33);
    let (a34, a35) = (a34 + a35, a34 - a35);
    let (a36, a38) = (a36 + a38, a36 - a38);
    let (a37, a39) = (a37 + a39, a37 - a39);
    let a39 = (a39 << 48);
    let (a36, a37) = (a36 + a37, a36 - a37);
    let (a38, a39) = (a38 + a39, a38 - a39);
    let (a16, a20) = (a16 + a20, a16 - a20);
    let (a17, a21) = (a17 + a21, a17 - a21);
    let (a18, a22) = (a18 + a22, a18 - a22);
    let (a19, a23) = (a19 + a23, a19 - a23);
    let a21 = (a21 << 24);
    let a22 = (a22 << 48);
    let a23 = (a23 << 72);
    let (a16, a18) = (a16 + a18, a16 - a18);
    let (a17, a19) = (a17 + a19, a17 - a19);
    let a19 = (a19 << 48);
    let (a16, a17) = (a16 + a17, a16 - a17);
    let (a18, a19) = (a18 + a19, a18 - a19);
    let (a20, a22) = (a20 + a22, a20 - a22);
    let (a21, a23) = (a21 + a23, a21 - a23);
    let a23 = (a23 << 48);
    let (a20, a21) = (a20 + a21, a20 - a21);
    let (a22, a23) = (a22 + a23, a22 - a23);
    let (a40, a44) = (a40 + a44, a40 - a44);
    let (a41, a45) = (a41 + a45, a41 - a45);
    let (a42, a46) = (a42 + a46, a42 - a46);
    let (a43, a47) = (a43 + a47, a43 - a47);
    let a45 = (a45 << 24);
    let a46 = (a46 << 48);
    let a47 = (a47 << 72);
    let (a40, a42) = (a40 + a42, a40 - a42);
    let (a41, a43) = (a41 + a43, a41 - a43);
    let a43 = (a43 << 48);
    let (a40, a41) = (a40 + a41, a40 - a41);
    let (a42, a43) = (a42 + a43, a42 - a43);
    let (a44, a46) = (a44 + a46, a44 - a46);
    let (a45, a47) = (a45 + a47, a45 - a47);
    let a47 = (a47 << 48);
    let (a44, a45) = (a44 + a45, a44 - a45);
    let (a46, a47) = (a46 + a47, a46 - a47);
    values[0] = a0;
    values[1] = a24;
    values[2] = a8;
    values[3] = a32;
    values[4] = a16;
    values[5] = a40;
    values[6] = a4;
    values[7] = a28;
    values[8] = a12;
    values[9] = a36;
    values[10] = a20;
    values[11] = a44;
    values[12] = a2;
    values[13] = a26;
    values[14] = a10;
    values[15] = a34;
    values[16] = a18;
    values[17] = a42;
    values[18] = a6;
    values[19] = a30;
    values[20] = a14;
    values[21] = a38;
    values[22] = a22;
    values[23] = a46;
    values[24] = a1;
    values[25] = a25;
    values[26] = a9;
    values[27] = a33;
    values[28] = a17;
    values[29] = a41;
    values[30] = a5;
    values[31] = a29;
    values[32] = a13;
    values[33] = a37;
    values[34] = a21;
    values[35] = a45;
    values[36] = a3;
    values[37] = a27;
    values[38] = a11;
    values[39] = a35;
    values[40] = a19;
    values[41] = a43;
    values[42] = a7;
    values[43] = a31;
    values[44] = a15;
    values[45] = a39;
    values[46] = a23;
    values[47] = a47;
}

/// Size 64 NTT.
fn ntt_64(values: &mut [Field]) {
    debug_assert_eq!(values.len(), 64);
    let a0 = values[0];
    let a1 = values[1];
    let a2 = values[2];
    let a3 = values[3];
    let a4 = values[4];
    let a5 = values[5];
    let a6 = values[6];
    let a7 = values[7];
    let a8 = values[8];
    let a9 = values[9];
    let a10 = values[10];
    let a11 = values[11];
    let a12 = values[12];
    let a13 = values[13];
    let a14 = values[14];
    let a15 = values[15];
    let a16 = values[16];
    let a17 = values[17];
    let a18 = values[18];
    let a19 = values[19];
    let a20 = values[20];
    let a21 = values[21];
    let a22 = values[22];
    let a23 = values[23];
    let a24 = values[24];
    let a25 = values[25];
    let a26 = values[26];
    let a27 = values[27];
    let a28 = values[28];
    let a29 = values[29];
    let a30 = values[30];
    let a31 = values[31];
    let a32 = values[32];
    let a33 = values[33];
    let a34 = values[34];
    let a35 = values[35];
    let a36 = values[36];
    let a37 = values[37];
    let a38 = values[38];
    let a39 = values[39];
    let a40 = values[40];
    let a41 = values[41];
    let a42 = values[42];
    let a43 = values[43];
    let a44 = values[44];
    let a45 = values[45];
    let a46 = values[46];
    let a47 = values[47];
    let a48 = values[48];
    let a49 = values[49];
    let a50 = values[50];
    let a51 = values[51];
    let a52 = values[52];
    let a53 = values[53];
    let a54 = values[54];
    let a55 = values[55];
    let a56 = values[56];
    let a57 = values[57];
    let a58 = values[58];
    let a59 = values[59];
    let a60 = values[60];
    let a61 = values[61];
    let a62 = values[62];
    let a63 = values[63];
    let (a0, a32) = (a0 + a32, a0 - a32);
    let (a8, a40) = (a8 + a40, a8 - a40);
    let (a16, a48) = (a16 + a48, a16 - a48);
    let (a24, a56) = (a24 + a56, a24 - a56);
    let a40 = (a40 << 24);
    let a48 = (a48 << 48);
    let a56 = (a56 << 72);
    let (a0, a16) = (a0 + a16, a0 - a16);
    let (a8, a24) = (a8 + a24, a8 - a24);
    let a24 = (a24 << 48);
    let (a0, a8) = (a0 + a8, a0 - a8);
    let (a16, a24) = (a16 + a24, a16 - a24);
    let (a32, a48) = (a32 + a48, a32 - a48);
    let (a40, a56) = (a40 + a56, a40 - a56);
    let a56 = (a56 << 48);
    let (a32, a40) = (a32 + a40, a32 - a40);
    let (a48, a56) = (a48 + a56, a48 - a56);
    let (a1, a33) = (a1 + a33, a1 - a33);
    let (a9, a41) = (a9 + a41, a9 - a41);
    let (a17, a49) = (a17 + a49, a17 - a49);
    let (a25, a57) = (a25 + a57, a25 - a57);
    let a41 = (a41 << 24);
    let a49 = (a49 << 48);
    let a57 = (a57 << 72);
    let (a1, a17) = (a1 + a17, a1 - a17);
    let (a9, a25) = (a9 + a25, a9 - a25);
    let a25 = (a25 << 48);
    let (a1, a9) = (a1 + a9, a1 - a9);
    let (a17, a25) = (a17 + a25, a17 - a25);
    let (a33, a49) = (a33 + a49, a33 - a49);
    let (a41, a57) = (a41 + a57, a41 - a57);
    let a57 = (a57 << 48);
    let (a33, a41) = (a33 + a41, a33 - a41);
    let (a49, a57) = (a49 + a57, a49 - a57);
    let (a2, a34) = (a2 + a34, a2 - a34);
    let (a10, a42) = (a10 + a42, a10 - a42);
    let (a18, a50) = (a18 + a50, a18 - a50);
    let (a26, a58) = (a26 + a58, a26 - a58);
    let a42 = (a42 << 24);
    let a50 = (a50 << 48);
    let a58 = (a58 << 72);
    let (a2, a18) = (a2 + a18, a2 - a18);
    let (a10, a26) = (a10 + a26, a10 - a26);
    let a26 = (a26 << 48);
    let (a2, a10) = (a2 + a10, a2 - a10);
    let (a18, a26) = (a18 + a26, a18 - a26);
    let (a34, a50) = (a34 + a50, a34 - a50);
    let (a42, a58) = (a42 + a58, a42 - a58);
    let a58 = (a58 << 48);
    let (a34, a42) = (a34 + a42, a34 - a42);
    let (a50, a58) = (a50 + a58, a50 - a58);
    let (a3, a35) = (a3 + a35, a3 - a35);
    let (a11, a43) = (a11 + a43, a11 - a43);
    let (a19, a51) = (a19 + a51, a19 - a51);
    let (a27, a59) = (a27 + a59, a27 - a59);
    let a43 = (a43 << 24);
    let a51 = (a51 << 48);
    let a59 = (a59 << 72);
    let (a3, a19) = (a3 + a19, a3 - a19);
    let (a11, a27) = (a11 + a27, a11 - a27);
    let a27 = (a27 << 48);
    let (a3, a11) = (a3 + a11, a3 - a11);
    let (a19, a27) = (a19 + a27, a19 - a27);
    let (a35, a51) = (a35 + a51, a35 - a51);
    let (a43, a59) = (a43 + a59, a43 - a59);
    let a59 = (a59 << 48);
    let (a35, a43) = (a35 + a43, a35 - a43);
    let (a51, a59) = (a51 + a59, a51 - a59);
    let (a4, a36) = (a4 + a36, a4 - a36);
    let (a12, a44) = (a12 + a44, a12 - a44);
    let (a20, a52) = (a20 + a52, a20 - a52);
    let (a28, a60) = (a28 + a60, a28 - a60);
    let a44 = (a44 << 24);
    let a52 = (a52 << 48);
    let a60 = (a60 << 72);
    let (a4, a20) = (a4 + a20, a4 - a20);
    let (a12, a28) = (a12 + a28, a12 - a28);
    let a28 = (a28 << 48);
    let (a4, a12) = (a4 + a12, a4 - a12);
    let (a20, a28) = (a20 + a28, a20 - a28);
    let (a36, a52) = (a36 + a52, a36 - a52);
    let (a44, a60) = (a44 + a60, a44 - a60);
    let a60 = (a60 << 48);
    let (a36, a44) = (a36 + a44, a36 - a44);
    let (a52, a60) = (a52 + a60, a52 - a60);
    let (a5, a37) = (a5 + a37, a5 - a37);
    let (a13, a45) = (a13 + a45, a13 - a45);
    let (a21, a53) = (a21 + a53, a21 - a53);
    let (a29, a61) = (a29 + a61, a29 - a61);
    let a45 = (a45 << 24);
    let a53 = (a53 << 48);
    let a61 = (a61 << 72);
    let (a5, a21) = (a5 + a21, a5 - a21);
    let (a13, a29) = (a13 + a29, a13 - a29);
    let a29 = (a29 << 48);
    let (a5, a13) = (a5 + a13, a5 - a13);
    let (a21, a29) = (a21 + a29, a21 - a29);
    let (a37, a53) = (a37 + a53, a37 - a53);
    let (a45, a61) = (a45 + a61, a45 - a61);
    let a61 = (a61 << 48);
    let (a37, a45) = (a37 + a45, a37 - a45);
    let (a53, a61) = (a53 + a61, a53 - a61);
    let (a6, a38) = (a6 + a38, a6 - a38);
    let (a14, a46) = (a14 + a46, a14 - a46);
    let (a22, a54) = (a22 + a54, a22 - a54);
    let (a30, a62) = (a30 + a62, a30 - a62);
    let a46 = (a46 << 24);
    let a54 = (a54 << 48);
    let a62 = (a62 << 72);
    let (a6, a22) = (a6 + a22, a6 - a22);
    let (a14, a30) = (a14 + a30, a14 - a30);
    let a30 = (a30 << 48);
    let (a6, a14) = (a6 + a14, a6 - a14);
    let (a22, a30) = (a22 + a30, a22 - a30);
    let (a38, a54) = (a38 + a54, a38 - a54);
    let (a46, a62) = (a46 + a62, a46 - a62);
    let a62 = (a62 << 48);
    let (a38, a46) = (a38 + a46, a38 - a46);
    let (a54, a62) = (a54 + a62, a54 - a62);
    let (a7, a39) = (a7 + a39, a7 - a39);
    let (a15, a47) = (a15 + a47, a15 - a47);
    let (a23, a55) = (a23 + a55, a23 - a55);
    let (a31, a63) = (a31 + a63, a31 - a63);
    let a47 = (a47 << 24);
    let a55 = (a55 << 48);
    let a63 = (a63 << 72);
    let (a7, a23) = (a7 + a23, a7 - a23);
    let (a15, a31) = (a15 + a31, a15 - a31);
    let a31 = (a31 << 48);
    let (a7, a15) = (a7 + a15, a7 - a15);
    let (a23, a31) = (a23 + a31, a23 - a31);
    let (a39, a55) = (a39 + a55, a39 - a55);
    let (a47, a63) = (a47 + a63, a47 - a63);
    let a63 = (a63 << 48);
    let (a39, a47) = (a39 + a47, a39 - a47);
    let (a55, a63) = (a55 + a63, a55 - a63);
    let a33 = (a33 << 3);
    let a17 = (a17 << 6);
    let a49 = (a49 << 9);
    let a9 = (a9 << 12);
    let a41 = (a41 << 15);
    let a25 = (a25 << 18);
    let a57 = (a57 << 21);
    let a34 = (a34 << 6);
    let a18 = (a18 << 12);
    let a50 = (a50 << 18);
    let a10 = (a10 << 24);
    let a42 = (a42 << 30);
    let a26 = (a26 << 36);
    let a58 = (a58 << 42);
    let a35 = (a35 << 9);
    let a19 = (a19 << 18);
    let a51 = (a51 << 27);
    let a11 = (a11 << 36);
    let a43 = (a43 << 45);
    let a27 = (a27 << 54);
    let a59 = (a59 << 63);
    let a36 = (a36 << 12);
    let a20 = (a20 << 24);
    let a52 = (a52 << 36);
    let a12 = (a12 << 48);
    let a44 = (a44 << 60);
    let a28 = (a28 << 72);
    let a60 = (a60 << 84);
    let a37 = (a37 << 15);
    let a21 = (a21 << 30);
    let a53 = (a53 << 45);
    let a13 = (a13 << 60);
    let a45 = (a45 << 75);
    let a29 = (a29 << 90);
    let a61 = (-(a61 << 9));
    let a38 = (a38 << 18);
    let a22 = (a22 << 36);
    let a54 = (a54 << 54);
    let a14 = (a14 << 72);
    let a46 = (a46 << 90);
    let a30 = (-(a30 << 12));
    let a62 = (-(a62 << 30));
    let a39 = (a39 << 21);
    let a23 = (a23 << 42);
    let a55 = (a55 << 63);
    let a15 = (a15 << 84);
    let a47 = (-(a47 << 9));
    let a31 = (-(a31 << 30));
    let a63 = (-(a63 << 51));
    let (a0, a4) = (a0 + a4, a0 - a4);
    let (a1, a5) = (a1 + a5, a1 - a5);
    let (a2, a6) = (a2 + a6, a2 - a6);
    let (a3, a7) = (a3 + a7, a3 - a7);
    let a5 = (a5 << 24);
    let a6 = (a6 << 48);
    let a7 = (a7 << 72);
    let (a0, a2) = (a0 + a2, a0 - a2);
    let (a1, a3) = (a1 + a3, a1 - a3);
    let a3 = (a3 << 48);
    let (a0, a1) = (a0 + a1, a0 - a1);
    let (a2, a3) = (a2 + a3, a2 - a3);
    let (a4, a6) = (a4 + a6, a4 - a6);
    let (a5, a7) = (a5 + a7, a5 - a7);
    let a7 = (a7 << 48);
    let (a4, a5) = (a4 + a5, a4 - a5);
    let (a6, a7) = (a6 + a7, a6 - a7);
    let (a32, a36) = (a32 + a36, a32 - a36);
    let (a33, a37) = (a33 + a37, a33 - a37);
    let (a34, a38) = (a34 + a38, a34 - a38);
    let (a35, a39) = (a35 + a39, a35 - a39);
    let a37 = (a37 << 24);
    let a38 = (a38 << 48);
    let a39 = (a39 << 72);
    let (a32, a34) = (a32 + a34, a32 - a34);
    let (a33, a35) = (a33 + a35, a33 - a35);
    let a35 = (a35 << 48);
    let (a32, a33) = (a32 + a33, a32 - a33);
    let (a34, a35) = (a34 + a35, a34 - a35);
    let (a36, a38) = (a36 + a38, a36 - a38);
    let (a37, a39) = (a37 + a39, a37 - a39);
    let a39 = (a39 << 48);
    let (a36, a37) = (a36 + a37, a36 - a37);
    let (a38, a39) = (a38 + a39, a38 - a39);
    let (a16, a20) = (a16 + a20, a16 - a20);
    let (a17, a21) = (a17 + a21, a17 - a21);
    let (a18, a22) = (a18 + a22, a18 - a22);
    let (a19, a23) = (a19 + a23, a19 - a23);
    let a21 = (a21 << 24);
    let a22 = (a22 << 48);
    let a23 = (a23 << 72);
    let (a16, a18) = (a16 + a18, a16 - a18);
    let (a17, a19) = (a17 + a19, a17 - a19);
    let a19 = (a19 << 48);
    let (a16, a17) = (a16 + a17, a16 - a17);
    let (a18, a19) = (a18 + a19, a18 - a19);
    let (a20, a22) = (a20 + a22, a20 - a22);
    let (a21, a23) = (a21 + a23, a21 - a23);
    let a23 = (a23 << 48);
    let (a20, a21) = (a20 + a21, a20 - a21);
    let (a22, a23) = (a22 + a23, a22 - a23);
    let (a48, a52) = (a48 + a52, a48 - a52);
    let (a49, a53) = (a49 + a53, a49 - a53);
    let (a50, a54) = (a50 + a54, a50 - a54);
    let (a51, a55) = (a51 + a55, a51 - a55);
    let a53 = (a53 << 24);
    let a54 = (a54 << 48);
    let a55 = (a55 << 72);
    let (a48, a50) = (a48 + a50, a48 - a50);
    let (a49, a51) = (a49 + a51, a49 - a51);
    let a51 = (a51 << 48);
    let (a48, a49) = (a48 + a49, a48 - a49);
    let (a50, a51) = (a50 + a51, a50 - a51);
    let (a52, a54) = (a52 + a54, a52 - a54);
    let (a53, a55) = (a53 + a55, a53 - a55);
    let a55 = (a55 << 48);
    let (a52, a53) = (a52 + a53, a52 - a53);
    let (a54, a55) = (a54 + a55, a54 - a55);
    let (a8, a12) = (a8 + a12, a8 - a12);
    let (a9, a13) = (a9 + a13, a9 - a13);
    let (a10, a14) = (a10 + a14, a10 - a14);
    let (a11, a15) = (a11 + a15, a11 - a15);
    let a13 = (a13 << 24);
    let a14 = (a14 << 48);
    let a15 = (a15 << 72);
    let (a8, a10) = (a8 + a10, a8 - a10);
    let (a9, a11) = (a9 + a11, a9 - a11);
    let a11 = (a11 << 48);
    let (a8, a9) = (a8 + a9, a8 - a9);
    let (a10, a11) = (a10 + a11, a10 - a11);
    let (a12, a14) = (a12 + a14, a12 - a14);
    let (a13, a15) = (a13 + a15, a13 - a15);
    let a15 = (a15 << 48);
    let (a12, a13) = (a12 + a13, a12 - a13);
    let (a14, a15) = (a14 + a15, a14 - a15);
    let (a40, a44) = (a40 + a44, a40 - a44);
    let (a41, a45) = (a41 + a45, a41 - a45);
    let (a42, a46) = (a42 + a46, a42 - a46);
    let (a43, a47) = (a43 + a47, a43 - a47);
    let a45 = (a45 << 24);
    let a46 = (a46 << 48);
    let a47 = (a47 << 72);
    let (a40, a42) = (a40 + a42, a40 - a42);
    let (a41, a43) = (a41 + a43, a41 - a43);
    let a43 = (a43 << 48);
    let (a40, a41) = (a40 + a41, a40 - a41);
    let (a42, a43) = (a42 + a43, a42 - a43);
    let (a44, a46) = (a44 + a46, a44 - a46);
    let (a45, a47) = (a45 + a47, a45 - a47);
    let a47 = (a47 << 48);
    let (a44, a45) = (a44 + a45, a44 - a45);
    let (a46, a47) = (a46 + a47, a46 - a47);
    let (a24, a28) = (a24 + a28, a24 - a28);
    let (a25, a29) = (a25 + a29, a25 - a29);
    let (a26, a30) = (a26 + a30, a26 - a30);
    let (a27, a31) = (a27 + a31, a27 - a31);
    let a29 = (a29 << 24);
    let a30 = (a30 << 48);
    let a31 = (a31 << 72);
    let (a24, a26) = (a24 + a26, a24 - a26);
    let (a25, a27) = (a25 + a27, a25 - a27);
    let a27 = (a27 << 48);
    let (a24, a25) = (a24 + a25, a24 - a25);
    let (a26, a27) = (a26 + a27, a26 - a27);
    let (a28, a30) = (a28 + a30, a28 - a30);
    let (a29, a31) = (a29 + a31, a29 - a31);
    let a31 = (a31 << 48);
    let (a28, a29) = (a28 + a29, a28 - a29);
    let (a30, a31) = (a30 + a31, a30 - a31);
    let (a56, a60) = (a56 + a60, a56 - a60);
    let (a57, a61) = (a57 + a61, a57 - a61);
    let (a58, a62) = (a58 + a62, a58 - a62);
    let (a59, a63) = (a59 + a63, a59 - a63);
    let a61 = (a61 << 24);
    let a62 = (a62 << 48);
    let a63 = (a63 << 72);
    let (a56, a58) = (a56 + a58, a56 - a58);
    let (a57, a59) = (a57 + a59, a57 - a59);
    let a59 = (a59 << 48);
    let (a56, a57) = (a56 + a57, a56 - a57);
    let (a58, a59) = (a58 + a59, a58 - a59);
    let (a60, a62) = (a60 + a62, a60 - a62);
    let (a61, a63) = (a61 + a63, a61 - a63);
    let a63 = (a63 << 48);
    let (a60, a61) = (a60 + a61, a60 - a61);
    let (a62, a63) = (a62 + a63, a62 - a63);
    values[0] = a0;
    values[1] = a32;
    values[2] = a16;
    values[3] = a48;
    values[4] = a8;
    values[5] = a40;
    values[6] = a24;
    values[7] = a56;
    values[8] = a4;
    values[9] = a36;
    values[10] = a20;
    values[11] = a52;
    values[12] = a12;
    values[13] = a44;
    values[14] = a28;
    values[15] = a60;
    values[16] = a2;
    values[17] = a34;
    values[18] = a18;
    values[19] = a50;
    values[20] = a10;
    values[21] = a42;
    values[22] = a26;
    values[23] = a58;
    values[24] = a6;
    values[25] = a38;
    values[26] = a22;
    values[27] = a54;
    values[28] = a14;
    values[29] = a46;
    values[30] = a30;
    values[31] = a62;
    values[32] = a1;
    values[33] = a33;
    values[34] = a17;
    values[35] = a49;
    values[36] = a9;
    values[37] = a41;
    values[38] = a25;
    values[39] = a57;
    values[40] = a5;
    values[41] = a37;
    values[42] = a21;
    values[43] = a53;
    values[44] = a13;
    values[45] = a45;
    values[46] = a29;
    values[47] = a61;
    values[48] = a3;
    values[49] = a35;
    values[50] = a19;
    values[51] = a51;
    values[52] = a11;
    values[53] = a43;
    values[54] = a27;
    values[55] = a59;
    values[56] = a7;
    values[57] = a39;
    values[58] = a23;
    values[59] = a55;
    values[60] = a15;
    values[61] = a47;
    values[62] = a31;
    values[63] = a63;
}

/// Size 96 NTT.
fn ntt_96(values: &mut [Field]) {
    debug_assert_eq!(values.len(), 96);
    let a0 = values[0];
    let a1 = values[1];
    let a2 = values[2];
    let a3 = values[3];
    let a4 = values[4];
    let a5 = values[5];
    let a6 = values[6];
    let a7 = values[7];
    let a8 = values[8];
    let a9 = values[9];
    let a10 = values[10];
    let a11 = values[11];
    let a12 = values[12];
    let a13 = values[13];
    let a14 = values[14];
    let a15 = values[15];
    let a16 = values[16];
    let a17 = values[17];
    let a18 = values[18];
    let a19 = values[19];
    let a20 = values[20];
    let a21 = values[21];
    let a22 = values[22];
    let a23 = values[23];
    let a24 = values[24];
    let a25 = values[25];
    let a26 = values[26];
    let a27 = values[27];
    let a28 = values[28];
    let a29 = values[29];
    let a30 = values[30];
    let a31 = values[31];
    let a32 = values[32];
    let a33 = values[33];
    let a34 = values[34];
    let a35 = values[35];
    let a36 = values[36];
    let a37 = values[37];
    let a38 = values[38];
    let a39 = values[39];
    let a40 = values[40];
    let a41 = values[41];
    let a42 = values[42];
    let a43 = values[43];
    let a44 = values[44];
    let a45 = values[45];
    let a46 = values[46];
    let a47 = values[47];
    let a48 = values[48];
    let a49 = values[49];
    let a50 = values[50];
    let a51 = values[51];
    let a52 = values[52];
    let a53 = values[53];
    let a54 = values[54];
    let a55 = values[55];
    let a56 = values[56];
    let a57 = values[57];
    let a58 = values[58];
    let a59 = values[59];
    let a60 = values[60];
    let a61 = values[61];
    let a62 = values[62];
    let a63 = values[63];
    let a64 = values[64];
    let a65 = values[65];
    let a66 = values[66];
    let a67 = values[67];
    let a68 = values[68];
    let a69 = values[69];
    let a70 = values[70];
    let a71 = values[71];
    let a72 = values[72];
    let a73 = values[73];
    let a74 = values[74];
    let a75 = values[75];
    let a76 = values[76];
    let a77 = values[77];
    let a78 = values[78];
    let a79 = values[79];
    let a80 = values[80];
    let a81 = values[81];
    let a82 = values[82];
    let a83 = values[83];
    let a84 = values[84];
    let a85 = values[85];
    let a86 = values[86];
    let a87 = values[87];
    let a88 = values[88];
    let a89 = values[89];
    let a90 = values[90];
    let a91 = values[91];
    let a92 = values[92];
    let a93 = values[93];
    let a94 = values[94];
    let a95 = values[95];
    let (a0, a48) = (a0 + a48, a0 - a48);
    let (a12, a60) = (a12 + a60, a12 - a60);
    let (a24, a72) = (a24 + a72, a24 - a72);
    let (a36, a84) = (a36 + a84, a36 - a84);
    let a60 = (a60 << 24);
    let a72 = (a72 << 48);
    let a84 = (a84 << 72);
    let (a0, a24) = (a0 + a24, a0 - a24);
    let (a12, a36) = (a12 + a36, a12 - a36);
    let a36 = (a36 << 48);
    let (a0, a12) = (a0 + a12, a0 - a12);
    let (a24, a36) = (a24 + a36, a24 - a36);
    let (a48, a72) = (a48 + a72, a48 - a72);
    let (a60, a84) = (a60 + a84, a60 - a84);
    let a84 = (a84 << 48);
    let (a48, a60) = (a48 + a60, a48 - a60);
    let (a72, a84) = (a72 + a84, a72 - a84);
    let (a1, a49) = (a1 + a49, a1 - a49);
    let (a13, a61) = (a13 + a61, a13 - a61);
    let (a25, a73) = (a25 + a73, a25 - a73);
    let (a37, a85) = (a37 + a85, a37 - a85);
    let a61 = (a61 << 24);
    let a73 = (a73 << 48);
    let a85 = (a85 << 72);
    let (a1, a25) = (a1 + a25, a1 - a25);
    let (a13, a37) = (a13 + a37, a13 - a37);
    let a37 = (a37 << 48);
    let (a1, a13) = (a1 + a13, a1 - a13);
    let (a25, a37) = (a25 + a37, a25 - a37);
    let (a49, a73) = (a49 + a73, a49 - a73);
    let (a61, a85) = (a61 + a85, a61 - a85);
    let a85 = (a85 << 48);
    let (a49, a61) = (a49 + a61, a49 - a61);
    let (a73, a85) = (a73 + a85, a73 - a85);
    let (a2, a50) = (a2 + a50, a2 - a50);
    let (a14, a62) = (a14 + a62, a14 - a62);
    let (a26, a74) = (a26 + a74, a26 - a74);
    let (a38, a86) = (a38 + a86, a38 - a86);
    let a62 = (a62 << 24);
    let a74 = (a74 << 48);
    let a86 = (a86 << 72);
    let (a2, a26) = (a2 + a26, a2 - a26);
    let (a14, a38) = (a14 + a38, a14 - a38);
    let a38 = (a38 << 48);
    let (a2, a14) = (a2 + a14, a2 - a14);
    let (a26, a38) = (a26 + a38, a26 - a38);
    let (a50, a74) = (a50 + a74, a50 - a74);
    let (a62, a86) = (a62 + a86, a62 - a86);
    let a86 = (a86 << 48);
    let (a50, a62) = (a50 + a62, a50 - a62);
    let (a74, a86) = (a74 + a86, a74 - a86);
    let (a3, a51) = (a3 + a51, a3 - a51);
    let (a15, a63) = (a15 + a63, a15 - a63);
    let (a27, a75) = (a27 + a75, a27 - a75);
    let (a39, a87) = (a39 + a87, a39 - a87);
    let a63 = (a63 << 24);
    let a75 = (a75 << 48);
    let a87 = (a87 << 72);
    let (a3, a27) = (a3 + a27, a3 - a27);
    let (a15, a39) = (a15 + a39, a15 - a39);
    let a39 = (a39 << 48);
    let (a3, a15) = (a3 + a15, a3 - a15);
    let (a27, a39) = (a27 + a39, a27 - a39);
    let (a51, a75) = (a51 + a75, a51 - a75);
    let (a63, a87) = (a63 + a87, a63 - a87);
    let a87 = (a87 << 48);
    let (a51, a63) = (a51 + a63, a51 - a63);
    let (a75, a87) = (a75 + a87, a75 - a87);
    let (a4, a52) = (a4 + a52, a4 - a52);
    let (a16, a64) = (a16 + a64, a16 - a64);
    let (a28, a76) = (a28 + a76, a28 - a76);
    let (a40, a88) = (a40 + a88, a40 - a88);
    let a64 = (a64 << 24);
    let a76 = (a76 << 48);
    let a88 = (a88 << 72);
    let (a4, a28) = (a4 + a28, a4 - a28);
    let (a16, a40) = (a16 + a40, a16 - a40);
    let a40 = (a40 << 48);
    let (a4, a16) = (a4 + a16, a4 - a16);
    let (a28, a40) = (a28 + a40, a28 - a40);
    let (a52, a76) = (a52 + a76, a52 - a76);
    let (a64, a88) = (a64 + a88, a64 - a88);
    let a88 = (a88 << 48);
    let (a52, a64) = (a52 + a64, a52 - a64);
    let (a76, a88) = (a76 + a88, a76 - a88);
    let (a5, a53) = (a5 + a53, a5 - a53);
    let (a17, a65) = (a17 + a65, a17 - a65);
    let (a29, a77) = (a29 + a77, a29 - a77);
    let (a41, a89) = (a41 + a89, a41 - a89);
    let a65 = (a65 << 24);
    let a77 = (a77 << 48);
    let a89 = (a89 << 72);
    let (a5, a29) = (a5 + a29, a5 - a29);
    let (a17, a41) = (a17 + a41, a17 - a41);
    let a41 = (a41 << 48);
    let (a5, a17) = (a5 + a17, a5 - a17);
    let (a29, a41) = (a29 + a41, a29 - a41);
    let (a53, a77) = (a53 + a77, a53 - a77);
    let (a65, a89) = (a65 + a89, a65 - a89);
    let a89 = (a89 << 48);
    let (a53, a65) = (a53 + a65, a53 - a65);
    let (a77, a89) = (a77 + a89, a77 - a89);
    let (a6, a54) = (a6 + a54, a6 - a54);
    let (a18, a66) = (a18 + a66, a18 - a66);
    let (a30, a78) = (a30 + a78, a30 - a78);
    let (a42, a90) = (a42 + a90, a42 - a90);
    let a66 = (a66 << 24);
    let a78 = (a78 << 48);
    let a90 = (a90 << 72);
    let (a6, a30) = (a6 + a30, a6 - a30);
    let (a18, a42) = (a18 + a42, a18 - a42);
    let a42 = (a42 << 48);
    let (a6, a18) = (a6 + a18, a6 - a18);
    let (a30, a42) = (a30 + a42, a30 - a42);
    let (a54, a78) = (a54 + a78, a54 - a78);
    let (a66, a90) = (a66 + a90, a66 - a90);
    let a90 = (a90 << 48);
    let (a54, a66) = (a54 + a66, a54 - a66);
    let (a78, a90) = (a78 + a90, a78 - a90);
    let (a7, a55) = (a7 + a55, a7 - a55);
    let (a19, a67) = (a19 + a67, a19 - a67);
    let (a31, a79) = (a31 + a79, a31 - a79);
    let (a43, a91) = (a43 + a91, a43 - a91);
    let a67 = (a67 << 24);
    let a79 = (a79 << 48);
    let a91 = (a91 << 72);
    let (a7, a31) = (a7 + a31, a7 - a31);
    let (a19, a43) = (a19 + a43, a19 - a43);
    let a43 = (a43 << 48);
    let (a7, a19) = (a7 + a19, a7 - a19);
    let (a31, a43) = (a31 + a43, a31 - a43);
    let (a55, a79) = (a55 + a79, a55 - a79);
    let (a67, a91) = (a67 + a91, a67 - a91);
    let a91 = (a91 << 48);
    let (a55, a67) = (a55 + a67, a55 - a67);
    let (a79, a91) = (a79 + a91, a79 - a91);
    let (a8, a56) = (a8 + a56, a8 - a56);
    let (a20, a68) = (a20 + a68, a20 - a68);
    let (a32, a80) = (a32 + a80, a32 - a80);
    let (a44, a92) = (a44 + a92, a44 - a92);
    let a68 = (a68 << 24);
    let a80 = (a80 << 48);
    let a92 = (a92 << 72);
    let (a8, a32) = (a8 + a32, a8 - a32);
    let (a20, a44) = (a20 + a44, a20 - a44);
    let a44 = (a44 << 48);
    let (a8, a20) = (a8 + a20, a8 - a20);
    let (a32, a44) = (a32 + a44, a32 - a44);
    let (a56, a80) = (a56 + a80, a56 - a80);
    let (a68, a92) = (a68 + a92, a68 - a92);
    let a92 = (a92 << 48);
    let (a56, a68) = (a56 + a68, a56 - a68);
    let (a80, a92) = (a80 + a92, a80 - a92);
    let (a9, a57) = (a9 + a57, a9 - a57);
    let (a21, a69) = (a21 + a69, a21 - a69);
    let (a33, a81) = (a33 + a81, a33 - a81);
    let (a45, a93) = (a45 + a93, a45 - a93);
    let a69 = (a69 << 24);
    let a81 = (a81 << 48);
    let a93 = (a93 << 72);
    let (a9, a33) = (a9 + a33, a9 - a33);
    let (a21, a45) = (a21 + a45, a21 - a45);
    let a45 = (a45 << 48);
    let (a9, a21) = (a9 + a21, a9 - a21);
    let (a33, a45) = (a33 + a45, a33 - a45);
    let (a57, a81) = (a57 + a81, a57 - a81);
    let (a69, a93) = (a69 + a93, a69 - a93);
    let a93 = (a93 << 48);
    let (a57, a69) = (a57 + a69, a57 - a69);
    let (a81, a93) = (a81 + a93, a81 - a93);
    let (a10, a58) = (a10 + a58, a10 - a58);
    let (a22, a70) = (a22 + a70, a22 - a70);
    let (a34, a82) = (a34 + a82, a34 - a82);
    let (a46, a94) = (a46 + a94, a46 - a94);
    let a70 = (a70 << 24);
    let a82 = (a82 << 48);
    let a94 = (a94 << 72);
    let (a10, a34) = (a10 + a34, a10 - a34);
    let (a22, a46) = (a22 + a46, a22 - a46);
    let a46 = (a46 << 48);
    let (a10, a22) = (a10 + a22, a10 - a22);
    let (a34, a46) = (a34 + a46, a34 - a46);
    let (a58, a82) = (a58 + a82, a58 - a82);
    let (a70, a94) = (a70 + a94, a70 - a94);
    let a94 = (a94 << 48);
    let (a58, a70) = (a58 + a70, a58 - a70);
    let (a82, a94) = (a82 + a94, a82 - a94);
    let (a11, a59) = (a11 + a59, a11 - a59);
    let (a23, a71) = (a23 + a71, a23 - a71);
    let (a35, a83) = (a35 + a83, a35 - a83);
    let (a47, a95) = (a47 + a95, a47 - a95);
    let a71 = (a71 << 24);
    let a83 = (a83 << 48);
    let a95 = (a95 << 72);
    let (a11, a35) = (a11 + a35, a11 - a35);
    let (a23, a47) = (a23 + a47, a23 - a47);
    let a47 = (a47 << 48);
    let (a11, a23) = (a11 + a23, a11 - a23);
    let (a35, a47) = (a35 + a47, a35 - a47);
    let (a59, a83) = (a59 + a83, a59 - a83);
    let (a71, a95) = (a71 + a95, a71 - a95);
    let a95 = (a95 << 48);
    let (a59, a71) = (a59 + a71, a59 - a71);
    let (a83, a95) = (a83 + a95, a83 - a95);
    let a49 = (a49 << 2);
    let a25 = (a25 << 4);
    let a73 = (a73 << 6);
    let a13 = (a13 << 8);
    let a61 = (a61 << 10);
    let a37 = (a37 << 12);
    let a85 = (a85 << 14);
    let a50 = (a50 << 4);
    let a26 = (a26 << 8);
    let a74 = (a74 << 12);
    let a14 = (a14 << 16);
    let a62 = (a62 << 20);
    let a38 = (a38 << 24);
    let a86 = (a86 << 28);
    let a51 = (a51 << 6);
    let a27 = (a27 << 12);
    let a75 = (a75 << 18);
    let a15 = (a15 << 24);
    let a63 = (a63 << 30);
    let a39 = (a39 << 36);
    let a87 = (a87 << 42);
    let a52 = (a52 << 8);
    let a28 = (a28 << 16);
    let a76 = (a76 << 24);
    let a16 = (a16 << 32);
    let a64 = (a64 << 40);
    let a40 = (a40 << 48);
    let a88 = (a88 << 56);
    let a53 = (a53 << 10);
    let a29 = (a29 << 20);
    let a77 = (a77 << 30);
    let a17 = (a17 << 40);
    let a65 = (a65 << 50);
    let a41 = (a41 << 60);
    let a89 = (a89 << 70);
    let a54 = (a54 << 12);
    let a30 = (a30 << 24);
    let a78 = (a78 << 36);
    let a18 = (a18 << 48);
    let a66 = (a66 << 60);
    let a42 = (a42 << 72);
    let a90 = (a90 << 84);
    let a55 = (a55 << 14);
    let a31 = (a31 << 28);
    let a79 = (a79 << 42);
    let a19 = (a19 << 56);
    let a67 = (a67 << 70);
    let a43 = (a43 << 84);
    let a91 = (-(a91 << 2));
    let a56 = (a56 << 16);
    let a32 = (a32 << 32);
    let a80 = (a80 << 48);
    let a20 = (a20 << 64);
    let a68 = (a68 << 80);
    let a44 = (-a44);
    let a92 = (-(a92 << 16));
    let a57 = (a57 << 18);
    let a33 = (a33 << 36);
    let a81 = (a81 << 54);
    let a21 = (a21 << 72);
    let a69 = (a69 << 90);
    let a45 = (-(a45 << 12));
    let a93 = (-(a93 << 30));
    let a58 = (a58 << 20);
    let a34 = (a34 << 40);
    let a82 = (a82 << 60);
    let a22 = (a22 << 80);
    let a70 = (-(a70 << 4));
    let a46 = (-(a46 << 24));
    let a94 = (-(a94 << 44));
    let a59 = (a59 << 22);
    let a35 = (a35 << 44);
    let a83 = (a83 << 66);
    let a23 = (a23 << 88);
    let a71 = (-(a71 << 14));
    let a47 = (-(a47 << 36));
    let a95 = (-(a95 << 58));
    let (a0, a4, a8) = (a0 + a4 + a8,
        a0 + (a4 << 64) - (a8 << 32),
        a0 - (a4 << 32) + (a8 << 64));
    let (a1, a5, a9) = (a1 + a5 + a9,
        a1 + (a5 << 64) - (a9 << 32),
        a1 - (a5 << 32) + (a9 << 64));
    let (a2, a6, a10) = (a2 + a6 + a10,
        a2 + (a6 << 64) - (a10 << 32),
        a2 - (a6 << 32) + (a10 << 64));
    let (a3, a7, a11) = (a3 + a7 + a11,
        a3 + (a7 << 64) - (a11 << 32),
        a3 - (a7 << 32) + (a11 << 64));
    let a5 = (a5 << 16);
    let a9 = (a9 << 32);
    let a6 = (a6 << 32);
    let a10 = (a10 << 64);
    let a7 = (a7 << 48);
    let a11 = (-a11);
    let (a0, a2) = (a0 + a2, a0 - a2);
    let (a1, a3) = (a1 + a3, a1 - a3);
    let a3 = (a3 << 48);
    let (a0, a1) = (a0 + a1, a0 - a1);
    let (a2, a3) = (a2 + a3, a2 - a3);
    let (a4, a6) = (a4 + a6, a4 - a6);
    let (a5, a7) = (a5 + a7, a5 - a7);
    let a7 = (a7 << 48);
    let (a4, a5) = (a4 + a5, a4 - a5);
    let (a6, a7) = (a6 + a7, a6 - a7);
    let (a8, a10) = (a8 + a10, a8 - a10);
    let (a9, a11) = (a9 + a11, a9 - a11);
    let a11 = (a11 << 48);
    let (a8, a9) = (a8 + a9, a8 - a9);
    let (a10, a11) = (a10 + a11, a10 - a11);
    let (a48, a52, a56) = (a48 + a52 + a56,
        a48 + (a52 << 64) - (a56 << 32),
        a48 - (a52 << 32) + (a56 << 64));
    let (a49, a53, a57) = (a49 + a53 + a57,
        a49 + (a53 << 64) - (a57 << 32),
        a49 - (a53 << 32) + (a57 << 64));
    let (a50, a54, a58) = (a50 + a54 + a58,
        a50 + (a54 << 64) - (a58 << 32),
        a50 - (a54 << 32) + (a58 << 64));
    let (a51, a55, a59) = (a51 + a55 + a59,
        a51 + (a55 << 64) - (a59 << 32),
        a51 - (a55 << 32) + (a59 << 64));
    let a53 = (a53 << 16);
    let a57 = (a57 << 32);
    let a54 = (a54 << 32);
    let a58 = (a58 << 64);
    let a55 = (a55 << 48);
    let a59 = (-a59);
    let (a48, a50) = (a48 + a50, a48 - a50);
    let (a49, a51) = (a49 + a51, a49 - a51);
    let a51 = (a51 << 48);
    let (a48, a49) = (a48 + a49, a48 - a49);
    let (a50, a51) = (a50 + a51, a50 - a51);
    let (a52, a54) = (a52 + a54, a52 - a54);
    let (a53, a55) = (a53 + a55, a53 - a55);
    let a55 = (a55 << 48);
    let (a52, a53) = (a52 + a53, a52 - a53);
    let (a54, a55) = (a54 + a55, a54 - a55);
    let (a56, a58) = (a56 + a58, a56 - a58);
    let (a57, a59) = (a57 + a59, a57 - a59);
    let a59 = (a59 << 48);
    let (a56, a57) = (a56 + a57, a56 - a57);
    let (a58, a59) = (a58 + a59, a58 - a59);
    let (a24, a28, a32) = (a24 + a28 + a32,
        a24 + (a28 << 64) - (a32 << 32),
        a24 - (a28 << 32) + (a32 << 64));
    let (a25, a29, a33) = (a25 + a29 + a33,
        a25 + (a29 << 64) - (a33 << 32),
        a25 - (a29 << 32) + (a33 << 64));
    let (a26, a30, a34) = (a26 + a30 + a34,
        a26 + (a30 << 64) - (a34 << 32),
        a26 - (a30 << 32) + (a34 << 64));
    let (a27, a31, a35) = (a27 + a31 + a35,
        a27 + (a31 << 64) - (a35 << 32),
        a27 - (a31 << 32) + (a35 << 64));
    let a29 = (a29 << 16);
    let a33 = (a33 << 32);
    let a30 = (a30 << 32);
    let a34 = (a34 << 64);
    let a31 = (a31 << 48);
    let a35 = (-a35);
    let (a24, a26) = (a24 + a26, a24 - a26);
    let (a25, a27) = (a25 + a27, a25 - a27);
    let a27 = (a27 << 48);
    let (a24, a25) = (a24 + a25, a24 - a25);
    let (a26, a27) = (a26 + a27, a26 - a27);
    let (a28, a30) = (a28 + a30, a28 - a30);
    let (a29, a31) = (a29 + a31, a29 - a31);
    let a31 = (a31 << 48);
    let (a28, a29) = (a28 + a29, a28 - a29);
    let (a30, a31) = (a30 + a31, a30 - a31);
    let (a32, a34) = (a32 + a34, a32 - a34);
    let (a33, a35) = (a33 + a35, a33 - a35);
    let a35 = (a35 << 48);
    let (a32, a33) = (a32 + a33, a32 - a33);
    let (a34, a35) = (a34 + a35, a34 - a35);
    let (a72, a76, a80) = (a72 + a76 + a80,
        a72 + (a76 << 64) - (a80 << 32),
        a72 - (a76 << 32) + (a80 << 64));
    let (a73, a77, a81) = (a73 + a77 + a81,
        a73 + (a77 << 64) - (a81 << 32),
        a73 - (a77 << 32) + (a81 << 64));
    let (a74, a78, a82) = (a74 + a78 + a82,
        a74 + (a78 << 64) - (a82 << 32),
        a74 - (a78 << 32) + (a82 << 64));
    let (a75, a79, a83) = (a75 + a79 + a83,
        a75 + (a79 << 64) - (a83 << 32),
        a75 - (a79 << 32) + (a83 << 64));
    let a77 = (a77 << 16);
    let a81 = (a81 << 32);
    let a78 = (a78 << 32);
    let a82 = (a82 << 64);
    let a79 = (a79 << 48);
    let a83 = (-a83);
    let (a72, a74) = (a72 + a74, a72 - a74);
    let (a73, a75) = (a73 + a75, a73 - a75);
    let a75 = (a75 << 48);
    let (a72, a73) = (a72 + a73, a72 - a73);
    let (a74, a75) = (a74 + a75, a74 - a75);
    let (a76, a78) = (a76 + a78, a76 - a78);
    let (a77, a79) = (a77 + a79, a77 - a79);
    let a79 = (a79 << 48);
    let (a76, a77) = (a76 + a77, a76 - a77);
    let (a78, a79) = (a78 + a79, a78 - a79);
    let (a80, a82) = (a80 + a82, a80 - a82);
    let (a81, a83) = (a81 + a83, a81 - a83);
    let a83 = (a83 << 48);
    let (a80, a81) = (a80 + a81, a80 - a81);
    let (a82, a83) = (a82 + a83, a82 - a83);
    let (a12, a16, a20) = (a12 + a16 + a20,
        a12 + (a16 << 64) - (a20 << 32),
        a12 - (a16 << 32) + (a20 << 64));
    let (a13, a17, a21) = (a13 + a17 + a21,
        a13 + (a17 << 64) - (a21 << 32),
        a13 - (a17 << 32) + (a21 << 64));
    let (a14, a18, a22) = (a14 + a18 + a22,
        a14 + (a18 << 64) - (a22 << 32),
        a14 - (a18 << 32) + (a22 << 64));
    let (a15, a19, a23) = (a15 + a19 + a23,
        a15 + (a19 << 64) - (a23 << 32),
        a15 - (a19 << 32) + (a23 << 64));
    let a17 = (a17 << 16);
    let a21 = (a21 << 32);
    let a18 = (a18 << 32);
    let a22 = (a22 << 64);
    let a19 = (a19 << 48);
    let a23 = (-a23);
    let (a12, a14) = (a12 + a14, a12 - a14);
    let (a13, a15) = (a13 + a15, a13 - a15);
    let a15 = (a15 << 48);
    let (a12, a13) = (a12 + a13, a12 - a13);
    let (a14, a15) = (a14 + a15, a14 - a15);
    let (a16, a18) = (a16 + a18, a16 - a18);
    let (a17, a19) = (a17 + a19, a17 - a19);
    let a19 = (a19 << 48);
    let (a16, a17) = (a16 + a17, a16 - a17);
    let (a18, a19) = (a18 + a19, a18 - a19);
    let (a20, a22) = (a20 + a22, a20 - a22);
    let (a21, a23) = (a21 + a23, a21 - a23);
    let a23 = (a23 << 48);
    let (a20, a21) = (a20 + a21, a20 - a21);
    let (a22, a23) = (a22 + a23, a22 - a23);
    let (a60, a64, a68) = (a60 + a64 + a68,
        a60 + (a64 << 64) - (a68 << 32),
        a60 - (a64 << 32) + (a68 << 64));
    let (a61, a65, a69) = (a61 + a65 + a69,
        a61 + (a65 << 64) - (a69 << 32),
        a61 - (a65 << 32) + (a69 << 64));
    let (a62, a66, a70) = (a62 + a66 + a70,
        a62 + (a66 << 64) - (a70 << 32),
        a62 - (a66 << 32) + (a70 << 64));
    let (a63, a67, a71) = (a63 + a67 + a71,
        a63 + (a67 << 64) - (a71 << 32),
        a63 - (a67 << 32) + (a71 << 64));
    let a65 = (a65 << 16);
    let a69 = (a69 << 32);
    let a66 = (a66 << 32);
    let a70 = (a70 << 64);
    let a67 = (a67 << 48);
    let a71 = (-a71);
    let (a60, a62) = (a60 + a62, a60 - a62);
    let (a61, a63) = (a61 + a63, a61 - a63);
    let a63 = (a63 << 48);
    let (a60, a61) = (a60 + a61, a60 - a61);
    let (a62, a63) = (a62 + a63, a62 - a63);
    let (a64, a66) = (a64 + a66, a64 - a66);
    let (a65, a67) = (a65 + a67, a65 - a67);
    let a67 = (a67 << 48);
    let (a64, a65) = (a64 + a65, a64 - a65);
    let (a66, a67) = (a66 + a67, a66 - a67);
    let (a68, a70) = (a68 + a70, a68 - a70);
    let (a69, a71) = (a69 + a71, a69 - a71);
    let a71 = (a71 << 48);
    let (a68, a69) = (a68 + a69, a68 - a69);
    let (a70, a71) = (a70 + a71, a70 - a71);
    let (a36, a40, a44) = (a36 + a40 + a44,
        a36 + (a40 << 64) - (a44 << 32),
        a36 - (a40 << 32) + (a44 << 64));
    let (a37, a41, a45) = (a37 + a41 + a45,
        a37 + (a41 << 64) - (a45 << 32),
        a37 - (a41 << 32) + (a45 << 64));
    let (a38, a42, a46) = (a38 + a42 + a46,
        a38 + (a42 << 64) - (a46 << 32),
        a38 - (a42 << 32) + (a46 << 64));
    let (a39, a43, a47) = (a39 + a43 + a47,
        a39 + (a43 << 64) - (a47 << 32),
        a39 - (a43 << 32) + (a47 << 64));
    let a41 = (a41 << 16);
    let a45 = (a45 << 32);
    let a42 = (a42 << 32);
    let a46 = (a46 << 64);
    let a43 = (a43 << 48);
    let a47 = (-a47);
    let (a36, a38) = (a36 + a38, a36 - a38);
    let (a37, a39) = (a37 + a39, a37 - a39);
    let a39 = (a39 << 48);
    let (a36, a37) = (a36 + a37, a36 - a37);
    let (a38, a39) = (a38 + a39, a38 - a39);
    let (a40, a42) = (a40 + a42, a40 - a42);
    let (a41, a43) = (a41 + a43, a41 - a43);
    let a43 = (a43 << 48);
    let (a40, a41) = (a40 + a41, a40 - a41);
    let (a42, a43) = (a42 + a43, a42 - a43);
    let (a44, a46) = (a44 + a46, a44 - a46);
    let (a45, a47) = (a45 + a47, a45 - a47);
    let a47 = (a47 << 48);
    let (a44, a45) = (a44 + a45, a44 - a45);
    let (a46, a47) = (a46 + a47, a46 - a47);
    let (a84, a88, a92) = (a84 + a88 + a92,
        a84 + (a88 << 64) - (a92 << 32),
        a84 - (a88 << 32) + (a92 << 64));
    let (a85, a89, a93) = (a85 + a89 + a93,
        a85 + (a89 << 64) - (a93 << 32),
        a85 - (a89 << 32) + (a93 << 64));
    let (a86, a90, a94) = (a86 + a90 + a94,
        a86 + (a90 << 64) - (a94 << 32),
        a86 - (a90 << 32) + (a94 << 64));
    let (a87, a91, a95) = (a87 + a91 + a95,
        a87 + (a91 << 64) - (a95 << 32),
        a87 - (a91 << 32) + (a95 << 64));
    let a89 = (a89 << 16);
    let a93 = (a93 << 32);
    let a90 = (a90 << 32);
    let a94 = (a94 << 64);
    let a91 = (a91 << 48);
    let a95 = (-a95);
    let (a84, a86) = (a84 + a86, a84 - a86);
    let (a85, a87) = (a85 + a87, a85 - a87);
    let a87 = (a87 << 48);
    let (a84, a85) = (a84 + a85, a84 - a85);
    let (a86, a87) = (a86 + a87, a86 - a87);
    let (a88, a90) = (a88 + a90, a88 - a90);
    let (a89, a91) = (a89 + a91, a89 - a91);
    let a91 = (a91 << 48);
    let (a88, a89) = (a88 + a89, a88 - a89);
    let (a90, a91) = (a90 + a91, a90 - a91);
    let (a92, a94) = (a92 + a94, a92 - a94);
    let (a93, a95) = (a93 + a95, a93 - a95);
    let a95 = (a95 << 48);
    let (a92, a93) = (a92 + a93, a92 - a93);
    let (a94, a95) = (a94 + a95, a94 - a95);
    values[0] = a0;
    values[1] = a48;
    values[2] = a24;
    values[3] = a72;
    values[4] = a12;
    values[5] = a60;
    values[6] = a36;
    values[7] = a84;
    values[8] = a4;
    values[9] = a52;
    values[10] = a28;
    values[11] = a76;
    values[12] = a16;
    values[13] = a64;
    values[14] = a40;
    values[15] = a88;
    values[16] = a8;
    values[17] = a56;
    values[18] = a32;
    values[19] = a80;
    values[20] = a20;
    values[21] = a68;
    values[22] = a44;
    values[23] = a92;
    values[24] = a2;
    values[25] = a50;
    values[26] = a26;
    values[27] = a74;
    values[28] = a14;
    values[29] = a62;
    values[30] = a38;
    values[31] = a86;
    values[32] = a6;
    values[33] = a54;
    values[34] = a30;
    values[35] = a78;
    values[36] = a18;
    values[37] = a66;
    values[38] = a42;
    values[39] = a90;
    values[40] = a10;
    values[41] = a58;
    values[42] = a34;
    values[43] = a82;
    values[44] = a22;
    values[45] = a70;
    values[46] = a46;
    values[47] = a94;
    values[48] = a1;
    values[49] = a49;
    values[50] = a25;
    values[51] = a73;
    values[52] = a13;
    values[53] = a61;
    values[54] = a37;
    values[55] = a85;
    values[56] = a5;
    values[57] = a53;
    values[58] = a29;
    values[59] = a77;
    values[60] = a17;
    values[61] = a65;
    values[62] = a41;
    values[63] = a89;
    values[64] = a9;
    values[65] = a57;
    values[66] = a33;
    values[67] = a81;
    values[68] = a21;
    values[69] = a69;
    values[70] = a45;
    values[71] = a93;
    values[72] = a3;
    values[73] = a51;
    values[74] = a27;
    values[75] = a75;
    values[76] = a15;
    values[77] = a63;
    values[78] = a39;
    values[79] = a87;
    values[80] = a7;
    values[81] = a55;
    values[82] = a31;
    values[83] = a79;
    values[84] = a19;
    values[85] = a67;
    values[86] = a43;
    values[87] = a91;
    values[88] = a11;
    values[89] = a59;
    values[90] = a35;
    values[91] = a83;
    values[92] = a23;
    values[93] = a71;
    values[94] = a47;
    values[95] = a95;
}

/// Size 128 NTT.
fn ntt_128(values: &mut [Field]) {
    debug_assert_eq!(values.len(), 128);
    let a0 = values[0];
    let a1 = values[1];
    let a2 = values[2];
    let a3 = values[3];
    let a4 = values[4];
    let a5 = values[5];
    let a6 = values[6];
    let a7 = values[7];
    let a8 = values[8];
    let a9 = values[9];
    let a10 = values[10];
    let a11 = values[11];
    let a12 = values[12];
    let a13 = values[13];
    let a14 = values[14];
    let a15 = values[15];
    let a16 = values[16];
    let a17 = values[17];
    let a18 = values[18];
    let a19 = values[19];
    let a20 = values[20];
    let a21 = values[21];
    let a22 = values[22];
    let a23 = values[23];
    let a24 = values[24];
    let a25 = values[25];
    let a26 = values[26];
    let a27 = values[27];
    let a28 = values[28];
    let a29 = values[29];
    let a30 = values[30];
    let a31 = values[31];
    let a32 = values[32];
    let a33 = values[33];
    let a34 = values[34];
    let a35 = values[35];
    let a36 = values[36];
    let a37 = values[37];
    let a38 = values[38];
    let a39 = values[39];
    let a40 = values[40];
    let a41 = values[41];
    let a42 = values[42];
    let a43 = values[43];
    let a44 = values[44];
    let a45 = values[45];
    let a46 = values[46];
    let a47 = values[47];
    let a48 = values[48];
    let a49 = values[49];
    let a50 = values[50];
    let a51 = values[51];
    let a52 = values[52];
    let a53 = values[53];
    let a54 = values[54];
    let a55 = values[55];
    let a56 = values[56];
    let a57 = values[57];
    let a58 = values[58];
    let a59 = values[59];
    let a60 = values[60];
    let a61 = values[61];
    let a62 = values[62];
    let a63 = values[63];
    let a64 = values[64];
    let a65 = values[65];
    let a66 = values[66];
    let a67 = values[67];
    let a68 = values[68];
    let a69 = values[69];
    let a70 = values[70];
    let a71 = values[71];
    let a72 = values[72];
    let a73 = values[73];
    let a74 = values[74];
    let a75 = values[75];
    let a76 = values[76];
    let a77 = values[77];
    let a78 = values[78];
    let a79 = values[79];
    let a80 = values[80];
    let a81 = values[81];
    let a82 = values[82];
    let a83 = values[83];
    let a84 = values[84];
    let a85 = values[85];
    let a86 = values[86];
    let a87 = values[87];
    let a88 = values[88];
    let a89 = values[89];
    let a90 = values[90];
    let a91 = values[91];
    let a92 = values[92];
    let a93 = values[93];
    let a94 = values[94];
    let a95 = values[95];
    let a96 = values[96];
    let a97 = values[97];
    let a98 = values[98];
    let a99 = values[99];
    let a100 = values[100];
    let a101 = values[101];
    let a102 = values[102];
    let a103 = values[103];
    let a104 = values[104];
    let a105 = values[105];
    let a106 = values[106];
    let a107 = values[107];
    let a108 = values[108];
    let a109 = values[109];
    let a110 = values[110];
    let a111 = values[111];
    let a112 = values[112];
    let a113 = values[113];
    let a114 = values[114];
    let a115 = values[115];
    let a116 = values[116];
    let a117 = values[117];
    let a118 = values[118];
    let a119 = values[119];
    let a120 = values[120];
    let a121 = values[121];
    let a122 = values[122];
    let a123 = values[123];
    let a124 = values[124];
    let a125 = values[125];
    let a126 = values[126];
    let a127 = values[127];
    let (a0, a64) = (a0 + a64, a0 - a64);
    let (a16, a80) = (a16 + a80, a16 - a80);
    let (a32, a96) = (a32 + a96, a32 - a96);
    let (a48, a112) = (a48 + a112, a48 - a112);
    let a80 = (a80 << 24);
    let a96 = (a96 << 48);
    let a112 = (a112 << 72);
    let (a0, a32) = (a0 + a32, a0 - a32);
    let (a16, a48) = (a16 + a48, a16 - a48);
    let a48 = (a48 << 48);
    let (a0, a16) = (a0 + a16, a0 - a16);
    let (a32, a48) = (a32 + a48, a32 - a48);
    let (a64, a96) = (a64 + a96, a64 - a96);
    let (a80, a112) = (a80 + a112, a80 - a112);
    let a112 = (a112 << 48);
    let (a64, a80) = (a64 + a80, a64 - a80);
    let (a96, a112) = (a96 + a112, a96 - a112);
    let (a1, a65) = (a1 + a65, a1 - a65);
    let (a17, a81) = (a17 + a81, a17 - a81);
    let (a33, a97) = (a33 + a97, a33 - a97);
    let (a49, a113) = (a49 + a113, a49 - a113);
    let a81 = (a81 << 24);
    let a97 = (a97 << 48);
    let a113 = (a113 << 72);
    let (a1, a33) = (a1 + a33, a1 - a33);
    let (a17, a49) = (a17 + a49, a17 - a49);
    let a49 = (a49 << 48);
    let (a1, a17) = (a1 + a17, a1 - a17);
    let (a33, a49) = (a33 + a49, a33 - a49);
    let (a65, a97) = (a65 + a97, a65 - a97);
    let (a81, a113) = (a81 + a113, a81 - a113);
    let a113 = (a113 << 48);
    let (a65, a81) = (a65 + a81, a65 - a81);
    let (a97, a113) = (a97 + a113, a97 - a113);
    let (a2, a66) = (a2 + a66, a2 - a66);
    let (a18, a82) = (a18 + a82, a18 - a82);
    let (a34, a98) = (a34 + a98, a34 - a98);
    let (a50, a114) = (a50 + a114, a50 - a114);
    let a82 = (a82 << 24);
    let a98 = (a98 << 48);
    let a114 = (a114 << 72);
    let (a2, a34) = (a2 + a34, a2 - a34);
    let (a18, a50) = (a18 + a50, a18 - a50);
    let a50 = (a50 << 48);
    let (a2, a18) = (a2 + a18, a2 - a18);
    let (a34, a50) = (a34 + a50, a34 - a50);
    let (a66, a98) = (a66 + a98, a66 - a98);
    let (a82, a114) = (a82 + a114, a82 - a114);
    let a114 = (a114 << 48);
    let (a66, a82) = (a66 + a82, a66 - a82);
    let (a98, a114) = (a98 + a114, a98 - a114);
    let (a3, a67) = (a3 + a67, a3 - a67);
    let (a19, a83) = (a19 + a83, a19 - a83);
    let (a35, a99) = (a35 + a99, a35 - a99);
    let (a51, a115) = (a51 + a115, a51 - a115);
    let a83 = (a83 << 24);
    let a99 = (a99 << 48);
    let a115 = (a115 << 72);
    let (a3, a35) = (a3 + a35, a3 - a35);
    let (a19, a51) = (a19 + a51, a19 - a51);
    let a51 = (a51 << 48);
    let (a3, a19) = (a3 + a19, a3 - a19);
    let (a35, a51) = (a35 + a51, a35 - a51);
    let (a67, a99) = (a67 + a99, a67 - a99);
    let (a83, a115) = (a83 + a115, a83 - a115);
    let a115 = (a115 << 48);
    let (a67, a83) = (a67 + a83, a67 - a83);
    let (a99, a115) = (a99 + a115, a99 - a115);
    let (a4, a68) = (a4 + a68, a4 - a68);
    let (a20, a84) = (a20 + a84, a20 - a84);
    let (a36, a100) = (a36 + a100, a36 - a100);
    let (a52, a116) = (a52 + a116, a52 - a116);
    let a84 = (a84 << 24);
    let a100 = (a100 << 48);
    let a116 = (a116 << 72);
    let (a4, a36) = (a4 + a36, a4 - a36);
    let (a20, a52) = (a20 + a52, a20 - a52);
    let a52 = (a52 << 48);
    let (a4, a20) = (a4 + a20, a4 - a20);
    let (a36, a52) = (a36 + a52, a36 - a52);
    let (a68, a100) = (a68 + a100, a68 - a100);
    let (a84, a116) = (a84 + a116, a84 - a116);
    let a116 = (a116 << 48);
    let (a68, a84) = (a68 + a84, a68 - a84);
    let (a100, a116) = (a100 + a116, a100 - a116);
    let (a5, a69) = (a5 + a69, a5 - a69);
    let (a21, a85) = (a21 + a85, a21 - a85);
    let (a37, a101) = (a37 + a101, a37 - a101);
    let (a53, a117) = (a53 + a117, a53 - a117);
    let a85 = (a85 << 24);
    let a101 = (a101 << 48);
    let a117 = (a117 << 72);
    let (a5, a37) = (a5 + a37, a5 - a37);
    let (a21, a53) = (a21 + a53, a21 - a53);
    let a53 = (a53 << 48);
    let (a5, a21) = (a5 + a21, a5 - a21);
    let (a37, a53) = (a37 + a53, a37 - a53);
    let (a69, a101) = (a69 + a101, a69 - a101);
    let (a85, a117) = (a85 + a117, a85 - a117);
    let a117 = (a117 << 48);
    let (a69, a85) = (a69 + a85, a69 - a85);
    let (a101, a117) = (a101 + a117, a101 - a117);
    let (a6, a70) = (a6 + a70, a6 - a70);
    let (a22, a86) = (a22 + a86, a22 - a86);
    let (a38, a102) = (a38 + a102, a38 - a102);
    let (a54, a118) = (a54 + a118, a54 - a118);
    let a86 = (a86 << 24);
    let a102 = (a102 << 48);
    let a118 = (a118 << 72);
    let (a6, a38) = (a6 + a38, a6 - a38);
    let (a22, a54) = (a22 + a54, a22 - a54);
    let a54 = (a54 << 48);
    let (a6, a22) = (a6 + a22, a6 - a22);
    let (a38, a54) = (a38 + a54, a38 - a54);
    let (a70, a102) = (a70 + a102, a70 - a102);
    let (a86, a118) = (a86 + a118, a86 - a118);
    let a118 = (a118 << 48);
    let (a70, a86) = (a70 + a86, a70 - a86);
    let (a102, a118) = (a102 + a118, a102 - a118);
    let (a7, a71) = (a7 + a71, a7 - a71);
    let (a23, a87) = (a23 + a87, a23 - a87);
    let (a39, a103) = (a39 + a103, a39 - a103);
    let (a55, a119) = (a55 + a119, a55 - a119);
    let a87 = (a87 << 24);
    let a103 = (a103 << 48);
    let a119 = (a119 << 72);
    let (a7, a39) = (a7 + a39, a7 - a39);
    let (a23, a55) = (a23 + a55, a23 - a55);
    let a55 = (a55 << 48);
    let (a7, a23) = (a7 + a23, a7 - a23);
    let (a39, a55) = (a39 + a55, a39 - a55);
    let (a71, a103) = (a71 + a103, a71 - a103);
    let (a87, a119) = (a87 + a119, a87 - a119);
    let a119 = (a119 << 48);
    let (a71, a87) = (a71 + a87, a71 - a87);
    let (a103, a119) = (a103 + a119, a103 - a119);
    let (a8, a72) = (a8 + a72, a8 - a72);
    let (a24, a88) = (a24 + a88, a24 - a88);
    let (a40, a104) = (a40 + a104, a40 - a104);
    let (a56, a120) = (a56 + a120, a56 - a120);
    let a88 = (a88 << 24);
    let a104 = (a104 << 48);
    let a120 = (a120 << 72);
    let (a8, a40) = (a8 + a40, a8 - a40);
    let (a24, a56) = (a24 + a56, a24 - a56);
    let a56 = (a56 << 48);
    let (a8, a24) = (a8 + a24, a8 - a24);
    let (a40, a56) = (a40 + a56, a40 - a56);
    let (a72, a104) = (a72 + a104, a72 - a104);
    let (a88, a120) = (a88 + a120, a88 - a120);
    let a120 = (a120 << 48);
    let (a72, a88) = (a72 + a88, a72 - a88);
    let (a104, a120) = (a104 + a120, a104 - a120);
    let (a9, a73) = (a9 + a73, a9 - a73);
    let (a25, a89) = (a25 + a89, a25 - a89);
    let (a41, a105) = (a41 + a105, a41 - a105);
    let (a57, a121) = (a57 + a121, a57 - a121);
    let a89 = (a89 << 24);
    let a105 = (a105 << 48);
    let a121 = (a121 << 72);
    let (a9, a41) = (a9 + a41, a9 - a41);
    let (a25, a57) = (a25 + a57, a25 - a57);
    let a57 = (a57 << 48);
    let (a9, a25) = (a9 + a25, a9 - a25);
    let (a41, a57) = (a41 + a57, a41 - a57);
    let (a73, a105) = (a73 + a105, a73 - a105);
    let (a89, a121) = (a89 + a121, a89 - a121);
    let a121 = (a121 << 48);
    let (a73, a89) = (a73 + a89, a73 - a89);
    let (a105, a121) = (a105 + a121, a105 - a121);
    let (a10, a74) = (a10 + a74, a10 - a74);
    let (a26, a90) = (a26 + a90, a26 - a90);
    let (a42, a106) = (a42 + a106, a42 - a106);
    let (a58, a122) = (a58 + a122, a58 - a122);
    let a90 = (a90 << 24);
    let a106 = (a106 << 48);
    let a122 = (a122 << 72);
    let (a10, a42) = (a10 + a42, a10 - a42);
    let (a26, a58) = (a26 + a58, a26 - a58);
    let a58 = (a58 << 48);
    let (a10, a26) = (a10 + a26, a10 - a26);
    let (a42, a58) = (a42 + a58, a42 - a58);
    let (a74, a106) = (a74 + a106, a74 - a106);
    let (a90, a122) = (a90 + a122, a90 - a122);
    let a122 = (a122 << 48);
    let (a74, a90) = (a74 + a90, a74 - a90);
    let (a106, a122) = (a106 + a122, a106 - a122);
    let (a11, a75) = (a11 + a75, a11 - a75);
    let (a27, a91) = (a27 + a91, a27 - a91);
    let (a43, a107) = (a43 + a107, a43 - a107);
    let (a59, a123) = (a59 + a123, a59 - a123);
    let a91 = (a91 << 24);
    let a107 = (a107 << 48);
    let a123 = (a123 << 72);
    let (a11, a43) = (a11 + a43, a11 - a43);
    let (a27, a59) = (a27 + a59, a27 - a59);
    let a59 = (a59 << 48);
    let (a11, a27) = (a11 + a27, a11 - a27);
    let (a43, a59) = (a43 + a59, a43 - a59);
    let (a75, a107) = (a75 + a107, a75 - a107);
    let (a91, a123) = (a91 + a123, a91 - a123);
    let a123 = (a123 << 48);
    let (a75, a91) = (a75 + a91, a75 - a91);
    let (a107, a123) = (a107 + a123, a107 - a123);
    let (a12, a76) = (a12 + a76, a12 - a76);
    let (a28, a92) = (a28 + a92, a28 - a92);
    let (a44, a108) = (a44 + a108, a44 - a108);
    let (a60, a124) = (a60 + a124, a60 - a124);
    let a92 = (a92 << 24);
    let a108 = (a108 << 48);
    let a124 = (a124 << 72);
    let (a12, a44) = (a12 + a44, a12 - a44);
    let (a28, a60) = (a28 + a60, a28 - a60);
    let a60 = (a60 << 48);
    let (a12, a28) = (a12 + a28, a12 - a28);
    let (a44, a60) = (a44 + a60, a44 - a60);
    let (a76, a108) = (a76 + a108, a76 - a108);
    let (a92, a124) = (a92 + a124, a92 - a124);
    let a124 = (a124 << 48);
    let (a76, a92) = (a76 + a92, a76 - a92);
    let (a108, a124) = (a108 + a124, a108 - a124);
    let (a13, a77) = (a13 + a77, a13 - a77);
    let (a29, a93) = (a29 + a93, a29 - a93);
    let (a45, a109) = (a45 + a109, a45 - a109);
    let (a61, a125) = (a61 + a125, a61 - a125);
    let a93 = (a93 << 24);
    let a109 = (a109 << 48);
    let a125 = (a125 << 72);
    let (a13, a45) = (a13 + a45, a13 - a45);
    let (a29, a61) = (a29 + a61, a29 - a61);
    let a61 = (a61 << 48);
    let (a13, a29) = (a13 + a29, a13 - a29);
    let (a45, a61) = (a45 + a61, a45 - a61);
    let (a77, a109) = (a77 + a109, a77 - a109);
    let (a93, a125) = (a93 + a125, a93 - a125);
    let a125 = (a125 << 48);
    let (a77, a93) = (a77 + a93, a77 - a93);
    let (a109, a125) = (a109 + a125, a109 - a125);
    let (a14, a78) = (a14 + a78, a14 - a78);
    let (a30, a94) = (a30 + a94, a30 - a94);
    let (a46, a110) = (a46 + a110, a46 - a110);
    let (a62, a126) = (a62 + a126, a62 - a126);
    let a94 = (a94 << 24);
    let a110 = (a110 << 48);
    let a126 = (a126 << 72);
    let (a14, a46) = (a14 + a46, a14 - a46);
    let (a30, a62) = (a30 + a62, a30 - a62);
    let a62 = (a62 << 48);
    let (a14, a30) = (a14 + a30, a14 - a30);
    let (a46, a62) = (a46 + a62, a46 - a62);
    let (a78, a110) = (a78 + a110, a78 - a110);
    let (a94, a126) = (a94 + a126, a94 - a126);
    let a126 = (a126 << 48);
    let (a78, a94) = (a78 + a94, a78 - a94);
    let (a110, a126) = (a110 + a126, a110 - a126);
    let (a15, a79) = (a15 + a79, a15 - a79);
    let (a31, a95) = (a31 + a95, a31 - a95);
    let (a47, a111) = (a47 + a111, a47 - a111);
    let (a63, a127) = (a63 + a127, a63 - a127);
    let a95 = (a95 << 24);
    let a111 = (a111 << 48);
    let a127 = (a127 << 72);
    let (a15, a47) = (a15 + a47, a15 - a47);
    let (a31, a63) = (a31 + a63, a31 - a63);
    let a63 = (a63 << 48);
    let (a15, a31) = (a15 + a31, a15 - a31);
    let (a47, a63) = (a47 + a63, a47 - a63);
    let (a79, a111) = (a79 + a111, a79 - a111);
    let (a95, a127) = (a95 + a127, a95 - a127);
    let a127 = (a127 << 48);
    let (a79, a95) = (a79 + a95, a79 - a95);
    let (a111, a127) = (a111 + a127, a111 - a127);
    let a65 = (a65 << 25) + (-(a65 << 73));
    let a33 = (a33 << 3);
    let a97 = (a97 << 28) + (-(a97 << 76));
    let a17 = (a17 << 6);
    let a81 = (a81 << 31) + (-(a81 << 79));
    let a49 = (a49 << 9);
    let a113 = (a113 << 34) + (-(a113 << 82));
    let a66 = (a66 << 3);
    let a34 = (a34 << 6);
    let a98 = (a98 << 9);
    let a18 = (a18 << 12);
    let a82 = (a82 << 15);
    let a50 = (a50 << 18);
    let a114 = (a114 << 21);
    let a67 = (a67 << 28) + (-(a67 << 76));
    let a35 = (a35 << 9);
    let a99 = (a99 << 37) + (-(a99 << 85));
    let a19 = (a19 << 18);
    let a83 = (a83 << 46) + (-(a83 << 94));
    let a51 = (a51 << 27);
    let a115 = (a115 << 55) + (a115 << 7);
    let a68 = (a68 << 6);
    let a36 = (a36 << 12);
    let a100 = (a100 << 18);
    let a20 = (a20 << 24);
    let a84 = (a84 << 30);
    let a52 = (a52 << 36);
    let a116 = (a116 << 42);
    let a69 = (a69 << 31) + (-(a69 << 79));
    let a37 = (a37 << 15);
    let a101 = (a101 << 46) + (-(a101 << 94));
    let a21 = (a21 << 30);
    let a85 = (a85 << 61) + (a85 << 13);
    let a53 = (a53 << 45);
    let a117 = (a117 << 76) + (a117 << 28);
    let a70 = (a70 << 9);
    let a38 = (a38 << 18);
    let a102 = (a102 << 27);
    let a22 = (a22 << 36);
    let a86 = (a86 << 45);
    let a54 = (a54 << 54);
    let a118 = (a118 << 63);
    let a71 = (a71 << 34) + (-(a71 << 82));
    let a39 = (a39 << 21);
    let a103 = (a103 << 55) + (a103 << 7);
    let a23 = (a23 << 42);
    let a87 = (a87 << 76) + (a87 << 28);
    let a55 = (a55 << 63);
    let a119 = (-(a119 << 1)) + (a119 << 49);
    let a72 = (a72 << 12);
    let a40 = (a40 << 24);
    let a104 = (a104 << 36);
    let a24 = (a24 << 48);
    let a88 = (a88 << 60);
    let a56 = (a56 << 72);
    let a120 = (a120 << 84);
    let a73 = (a73 << 37) + (-(a73 << 85));
    let a41 = (a41 << 27);
    let a105 = (a105 << 64) + (a105 << 16);
    let a25 = (a25 << 54);
    let a89 = (a89 << 91) + (a89 << 43);
    let a57 = (a57 << 81);
    let a121 = (-(a121 << 22)) + (a121 << 70);
    let a74 = (a74 << 15);
    let a42 = (a42 << 30);
    let a106 = (a106 << 45);
    let a26 = (a26 << 60);
    let a90 = (a90 << 75);
    let a58 = (a58 << 90);
    let a122 = (-(a122 << 9));
    let a75 = (a75 << 40) + (-(a75 << 88));
    let a43 = (a43 << 33);
    let a107 = (a107 << 73) + (a107 << 25);
    let a27 = (a27 << 66);
    let a91 = (-(a91 << 10)) + (a91 << 58);
    let a59 = (-(a59 << 3));
    let a123 = (-(a123 << 43)) + (a123 << 91);
    let a76 = (a76 << 18);
    let a44 = (a44 << 36);
    let a108 = (a108 << 54);
    let a28 = (a28 << 72);
    let a92 = (a92 << 90);
    let a60 = (-(a60 << 12));
    let a124 = (-(a124 << 30));
    let a77 = (a77 << 43) + (-(a77 << 91));
    let a45 = (a45 << 39);
    let a109 = (a109 << 82) + (a109 << 34);
    let a29 = (a29 << 78);
    let a93 = (-(a93 << 25)) + (a93 << 73);
    let a61 = (-(a61 << 21));
    let a125 = (-(a125 << 64)) + (-(a125 << 16));
    let a78 = (a78 << 21);
    let a46 = (a46 << 42);
    let a110 = (a110 << 63);
    let a30 = (a30 << 84);
    let a94 = (-(a94 << 9));
    let a62 = (-(a62 << 30));
    let a126 = (-(a126 << 51));
    let a79 = (a79 << 46) + (-(a79 << 94));
    let a47 = (a47 << 45);
    let a111 = (a111 << 91) + (a111 << 43);
    let a31 = (a31 << 90);
    let a95 = (-(a95 << 40)) + (a95 << 88);
    let a63 = (-(a63 << 39));
    let a127 = (-(a127 << 85)) + (-(a127 << 37));
    let (a0, a8) = (a0 + a8, a0 - a8);
    let (a4, a12) = (a4 + a12, a4 - a12);
    let a12 = (a12 << 48);
    let (a0, a4) = (a0 + a4, a0 - a4);
    let (a8, a12) = (a8 + a12, a8 - a12);
    let (a1, a9) = (a1 + a9, a1 - a9);
    let (a5, a13) = (a5 + a13, a5 - a13);
    let a13 = (a13 << 48);
    let (a1, a5) = (a1 + a5, a1 - a5);
    let (a9, a13) = (a9 + a13, a9 - a13);
    let (a2, a10) = (a2 + a10, a2 - a10);
    let (a6, a14) = (a6 + a14, a6 - a14);
    let a14 = (a14 << 48);
    let (a2, a6) = (a2 + a6, a2 - a6);
    let (a10, a14) = (a10 + a14, a10 - a14);
    let (a3, a11) = (a3 + a11, a3 - a11);
    let (a7, a15) = (a7 + a15, a7 - a15);
    let a15 = (a15 << 48);
    let (a3, a7) = (a3 + a7, a3 - a7);
    let (a11, a15) = (a11 + a15, a11 - a15);
    let a9 = (a9 << 12);
    let a5 = (a5 << 24);
    let a13 = (a13 << 36);
    let a10 = (a10 << 24);
    let a6 = (a6 << 48);
    let a14 = (a14 << 72);
    let a11 = (a11 << 36);
    let a7 = (a7 << 72);
    let a15 = (-(a15 << 12));
    let (a0, a2) = (a0 + a2, a0 - a2);
    let (a1, a3) = (a1 + a3, a1 - a3);
    let a3 = (a3 << 48);
    let (a0, a1) = (a0 + a1, a0 - a1);
    let (a2, a3) = (a2 + a3, a2 - a3);
    let (a8, a10) = (a8 + a10, a8 - a10);
    let (a9, a11) = (a9 + a11, a9 - a11);
    let a11 = (a11 << 48);
    let (a8, a9) = (a8 + a9, a8 - a9);
    let (a10, a11) = (a10 + a11, a10 - a11);
    let (a4, a6) = (a4 + a6, a4 - a6);
    let (a5, a7) = (a5 + a7, a5 - a7);
    let a7 = (a7 << 48);
    let (a4, a5) = (a4 + a5, a4 - a5);
    let (a6, a7) = (a6 + a7, a6 - a7);
    let (a12, a14) = (a12 + a14, a12 - a14);
    let (a13, a15) = (a13 + a15, a13 - a15);
    let a15 = (a15 << 48);
    let (a12, a13) = (a12 + a13, a12 - a13);
    let (a14, a15) = (a14 + a15, a14 - a15);
    let (a64, a72) = (a64 + a72, a64 - a72);
    let (a68, a76) = (a68 + a76, a68 - a76);
    let a76 = (a76 << 48);
    let (a64, a68) = (a64 + a68, a64 - a68);
    let (a72, a76) = (a72 + a76, a72 - a76);
    let (a65, a73) = (a65 + a73, a65 - a73);
    let (a69, a77) = (a69 + a77, a69 - a77);
    let a77 = (a77 << 48);
    let (a65, a69) = (a65 + a69, a65 - a69);
    let (a73, a77) = (a73 + a77, a73 - a77);
    let (a66, a74) = (a66 + a74, a66 - a74);
    let (a70, a78) = (a70 + a78, a70 - a78);
    let a78 = (a78 << 48);
    let (a66, a70) = (a66 + a70, a66 - a70);
    let (a74, a78) = (a74 + a78, a74 - a78);
    let (a67, a75) = (a67 + a75, a67 - a75);
    let (a71, a79) = (a71 + a79, a71 - a79);
    let a79 = (a79 << 48);
    let (a67, a71) = (a67 + a71, a67 - a71);
    let (a75, a79) = (a75 + a79, a75 - a79);
    let a73 = (a73 << 12);
    let a69 = (a69 << 24);
    let a77 = (a77 << 36);
    let a74 = (a74 << 24);
    let a70 = (a70 << 48);
    let a78 = (a78 << 72);
    let a75 = (a75 << 36);
    let a71 = (a71 << 72);
    let a79 = (-(a79 << 12));
    let (a64, a66) = (a64 + a66, a64 - a66);
    let (a65, a67) = (a65 + a67, a65 - a67);
    let a67 = (a67 << 48);
    let (a64, a65) = (a64 + a65, a64 - a65);
    let (a66, a67) = (a66 + a67, a66 - a67);
    let (a72, a74) = (a72 + a74, a72 - a74);
    let (a73, a75) = (a73 + a75, a73 - a75);
    let a75 = (a75 << 48);
    let (a72, a73) = (a72 + a73, a72 - a73);
    let (a74, a75) = (a74 + a75, a74 - a75);
    let (a68, a70) = (a68 + a70, a68 - a70);
    let (a69, a71) = (a69 + a71, a69 - a71);
    let a71 = (a71 << 48);
    let (a68, a69) = (a68 + a69, a68 - a69);
    let (a70, a71) = (a70 + a71, a70 - a71);
    let (a76, a78) = (a76 + a78, a76 - a78);
    let (a77, a79) = (a77 + a79, a77 - a79);
    let a79 = (a79 << 48);
    let (a76, a77) = (a76 + a77, a76 - a77);
    let (a78, a79) = (a78 + a79, a78 - a79);
    let (a32, a40) = (a32 + a40, a32 - a40);
    let (a36, a44) = (a36 + a44, a36 - a44);
    let a44 = (a44 << 48);
    let (a32, a36) = (a32 + a36, a32 - a36);
    let (a40, a44) = (a40 + a44, a40 - a44);
    let (a33, a41) = (a33 + a41, a33 - a41);
    let (a37, a45) = (a37 + a45, a37 - a45);
    let a45 = (a45 << 48);
    let (a33, a37) = (a33 + a37, a33 - a37);
    let (a41, a45) = (a41 + a45, a41 - a45);
    let (a34, a42) = (a34 + a42, a34 - a42);
    let (a38, a46) = (a38 + a46, a38 - a46);
    let a46 = (a46 << 48);
    let (a34, a38) = (a34 + a38, a34 - a38);
    let (a42, a46) = (a42 + a46, a42 - a46);
    let (a35, a43) = (a35 + a43, a35 - a43);
    let (a39, a47) = (a39 + a47, a39 - a47);
    let a47 = (a47 << 48);
    let (a35, a39) = (a35 + a39, a35 - a39);
    let (a43, a47) = (a43 + a47, a43 - a47);
    let a41 = (a41 << 12);
    let a37 = (a37 << 24);
    let a45 = (a45 << 36);
    let a42 = (a42 << 24);
    let a38 = (a38 << 48);
    let a46 = (a46 << 72);
    let a43 = (a43 << 36);
    let a39 = (a39 << 72);
    let a47 = (-(a47 << 12));
    let (a32, a34) = (a32 + a34, a32 - a34);
    let (a33, a35) = (a33 + a35, a33 - a35);
    let a35 = (a35 << 48);
    let (a32, a33) = (a32 + a33, a32 - a33);
    let (a34, a35) = (a34 + a35, a34 - a35);
    let (a40, a42) = (a40 + a42, a40 - a42);
    let (a41, a43) = (a41 + a43, a41 - a43);
    let a43 = (a43 << 48);
    let (a40, a41) = (a40 + a41, a40 - a41);
    let (a42, a43) = (a42 + a43, a42 - a43);
    let (a36, a38) = (a36 + a38, a36 - a38);
    let (a37, a39) = (a37 + a39, a37 - a39);
    let a39 = (a39 << 48);
    let (a36, a37) = (a36 + a37, a36 - a37);
    let (a38, a39) = (a38 + a39, a38 - a39);
    let (a44, a46) = (a44 + a46, a44 - a46);
    let (a45, a47) = (a45 + a47, a45 - a47);
    let a47 = (a47 << 48);
    let (a44, a45) = (a44 + a45, a44 - a45);
    let (a46, a47) = (a46 + a47, a46 - a47);
    let (a96, a104) = (a96 + a104, a96 - a104);
    let (a100, a108) = (a100 + a108, a100 - a108);
    let a108 = (a108 << 48);
    let (a96, a100) = (a96 + a100, a96 - a100);
    let (a104, a108) = (a104 + a108, a104 - a108);
    let (a97, a105) = (a97 + a105, a97 - a105);
    let (a101, a109) = (a101 + a109, a101 - a109);
    let a109 = (a109 << 48);
    let (a97, a101) = (a97 + a101, a97 - a101);
    let (a105, a109) = (a105 + a109, a105 - a109);
    let (a98, a106) = (a98 + a106, a98 - a106);
    let (a102, a110) = (a102 + a110, a102 - a110);
    let a110 = (a110 << 48);
    let (a98, a102) = (a98 + a102, a98 - a102);
    let (a106, a110) = (a106 + a110, a106 - a110);
    let (a99, a107) = (a99 + a107, a99 - a107);
    let (a103, a111) = (a103 + a111, a103 - a111);
    let a111 = (a111 << 48);
    let (a99, a103) = (a99 + a103, a99 - a103);
    let (a107, a111) = (a107 + a111, a107 - a111);
    let a105 = (a105 << 12);
    let a101 = (a101 << 24);
    let a109 = (a109 << 36);
    let a106 = (a106 << 24);
    let a102 = (a102 << 48);
    let a110 = (a110 << 72);
    let a107 = (a107 << 36);
    let a103 = (a103 << 72);
    let a111 = (-(a111 << 12));
    let (a96, a98) = (a96 + a98, a96 - a98);
    let (a97, a99) = (a97 + a99, a97 - a99);
    let a99 = (a99 << 48);
    let (a96, a97) = (a96 + a97, a96 - a97);
    let (a98, a99) = (a98 + a99, a98 - a99);
    let (a104, a106) = (a104 + a106, a104 - a106);
    let (a105, a107) = (a105 + a107, a105 - a107);
    let a107 = (a107 << 48);
    let (a104, a105) = (a104 + a105, a104 - a105);
    let (a106, a107) = (a106 + a107, a106 - a107);
    let (a100, a102) = (a100 + a102, a100 - a102);
    let (a101, a103) = (a101 + a103, a101 - a103);
    let a103 = (a103 << 48);
    let (a100, a101) = (a100 + a101, a100 - a101);
    let (a102, a103) = (a102 + a103, a102 - a103);
    let (a108, a110) = (a108 + a110, a108 - a110);
    let (a109, a111) = (a109 + a111, a109 - a111);
    let a111 = (a111 << 48);
    let (a108, a109) = (a108 + a109, a108 - a109);
    let (a110, a111) = (a110 + a111, a110 - a111);
    let (a16, a24) = (a16 + a24, a16 - a24);
    let (a20, a28) = (a20 + a28, a20 - a28);
    let a28 = (a28 << 48);
    let (a16, a20) = (a16 + a20, a16 - a20);
    let (a24, a28) = (a24 + a28, a24 - a28);
    let (a17, a25) = (a17 + a25, a17 - a25);
    let (a21, a29) = (a21 + a29, a21 - a29);
    let a29 = (a29 << 48);
    let (a17, a21) = (a17 + a21, a17 - a21);
    let (a25, a29) = (a25 + a29, a25 - a29);
    let (a18, a26) = (a18 + a26, a18 - a26);
    let (a22, a30) = (a22 + a30, a22 - a30);
    let a30 = (a30 << 48);
    let (a18, a22) = (a18 + a22, a18 - a22);
    let (a26, a30) = (a26 + a30, a26 - a30);
    let (a19, a27) = (a19 + a27, a19 - a27);
    let (a23, a31) = (a23 + a31, a23 - a31);
    let a31 = (a31 << 48);
    let (a19, a23) = (a19 + a23, a19 - a23);
    let (a27, a31) = (a27 + a31, a27 - a31);
    let a25 = (a25 << 12);
    let a21 = (a21 << 24);
    let a29 = (a29 << 36);
    let a26 = (a26 << 24);
    let a22 = (a22 << 48);
    let a30 = (a30 << 72);
    let a27 = (a27 << 36);
    let a23 = (a23 << 72);
    let a31 = (-(a31 << 12));
    let (a16, a18) = (a16 + a18, a16 - a18);
    let (a17, a19) = (a17 + a19, a17 - a19);
    let a19 = (a19 << 48);
    let (a16, a17) = (a16 + a17, a16 - a17);
    let (a18, a19) = (a18 + a19, a18 - a19);
    let (a24, a26) = (a24 + a26, a24 - a26);
    let (a25, a27) = (a25 + a27, a25 - a27);
    let a27 = (a27 << 48);
    let (a24, a25) = (a24 + a25, a24 - a25);
    let (a26, a27) = (a26 + a27, a26 - a27);
    let (a20, a22) = (a20 + a22, a20 - a22);
    let (a21, a23) = (a21 + a23, a21 - a23);
    let a23 = (a23 << 48);
    let (a20, a21) = (a20 + a21, a20 - a21);
    let (a22, a23) = (a22 + a23, a22 - a23);
    let (a28, a30) = (a28 + a30, a28 - a30);
    let (a29, a31) = (a29 + a31, a29 - a31);
    let a31 = (a31 << 48);
    let (a28, a29) = (a28 + a29, a28 - a29);
    let (a30, a31) = (a30 + a31, a30 - a31);
    let (a80, a88) = (a80 + a88, a80 - a88);
    let (a84, a92) = (a84 + a92, a84 - a92);
    let a92 = (a92 << 48);
    let (a80, a84) = (a80 + a84, a80 - a84);
    let (a88, a92) = (a88 + a92, a88 - a92);
    let (a81, a89) = (a81 + a89, a81 - a89);
    let (a85, a93) = (a85 + a93, a85 - a93);
    let a93 = (a93 << 48);
    let (a81, a85) = (a81 + a85, a81 - a85);
    let (a89, a93) = (a89 + a93, a89 - a93);
    let (a82, a90) = (a82 + a90, a82 - a90);
    let (a86, a94) = (a86 + a94, a86 - a94);
    let a94 = (a94 << 48);
    let (a82, a86) = (a82 + a86, a82 - a86);
    let (a90, a94) = (a90 + a94, a90 - a94);
    let (a83, a91) = (a83 + a91, a83 - a91);
    let (a87, a95) = (a87 + a95, a87 - a95);
    let a95 = (a95 << 48);
    let (a83, a87) = (a83 + a87, a83 - a87);
    let (a91, a95) = (a91 + a95, a91 - a95);
    let a89 = (a89 << 12);
    let a85 = (a85 << 24);
    let a93 = (a93 << 36);
    let a90 = (a90 << 24);
    let a86 = (a86 << 48);
    let a94 = (a94 << 72);
    let a91 = (a91 << 36);
    let a87 = (a87 << 72);
    let a95 = (-(a95 << 12));
    let (a80, a82) = (a80 + a82, a80 - a82);
    let (a81, a83) = (a81 + a83, a81 - a83);
    let a83 = (a83 << 48);
    let (a80, a81) = (a80 + a81, a80 - a81);
    let (a82, a83) = (a82 + a83, a82 - a83);
    let (a88, a90) = (a88 + a90, a88 - a90);
    let (a89, a91) = (a89 + a91, a89 - a91);
    let a91 = (a91 << 48);
    let (a88, a89) = (a88 + a89, a88 - a89);
    let (a90, a91) = (a90 + a91, a90 - a91);
    let (a84, a86) = (a84 + a86, a84 - a86);
    let (a85, a87) = (a85 + a87, a85 - a87);
    let a87 = (a87 << 48);
    let (a84, a85) = (a84 + a85, a84 - a85);
    let (a86, a87) = (a86 + a87, a86 - a87);
    let (a92, a94) = (a92 + a94, a92 - a94);
    let (a93, a95) = (a93 + a95, a93 - a95);
    let a95 = (a95 << 48);
    let (a92, a93) = (a92 + a93, a92 - a93);
    let (a94, a95) = (a94 + a95, a94 - a95);
    let (a48, a56) = (a48 + a56, a48 - a56);
    let (a52, a60) = (a52 + a60, a52 - a60);
    let a60 = (a60 << 48);
    let (a48, a52) = (a48 + a52, a48 - a52);
    let (a56, a60) = (a56 + a60, a56 - a60);
    let (a49, a57) = (a49 + a57, a49 - a57);
    let (a53, a61) = (a53 + a61, a53 - a61);
    let a61 = (a61 << 48);
    let (a49, a53) = (a49 + a53, a49 - a53);
    let (a57, a61) = (a57 + a61, a57 - a61);
    let (a50, a58) = (a50 + a58, a50 - a58);
    let (a54, a62) = (a54 + a62, a54 - a62);
    let a62 = (a62 << 48);
    let (a50, a54) = (a50 + a54, a50 - a54);
    let (a58, a62) = (a58 + a62, a58 - a62);
    let (a51, a59) = (a51 + a59, a51 - a59);
    let (a55, a63) = (a55 + a63, a55 - a63);
    let a63 = (a63 << 48);
    let (a51, a55) = (a51 + a55, a51 - a55);
    let (a59, a63) = (a59 + a63, a59 - a63);
    let a57 = (a57 << 12);
    let a53 = (a53 << 24);
    let a61 = (a61 << 36);
    let a58 = (a58 << 24);
    let a54 = (a54 << 48);
    let a62 = (a62 << 72);
    let a59 = (a59 << 36);
    let a55 = (a55 << 72);
    let a63 = (-(a63 << 12));
    let (a48, a50) = (a48 + a50, a48 - a50);
    let (a49, a51) = (a49 + a51, a49 - a51);
    let a51 = (a51 << 48);
    let (a48, a49) = (a48 + a49, a48 - a49);
    let (a50, a51) = (a50 + a51, a50 - a51);
    let (a56, a58) = (a56 + a58, a56 - a58);
    let (a57, a59) = (a57 + a59, a57 - a59);
    let a59 = (a59 << 48);
    let (a56, a57) = (a56 + a57, a56 - a57);
    let (a58, a59) = (a58 + a59, a58 - a59);
    let (a52, a54) = (a52 + a54, a52 - a54);
    let (a53, a55) = (a53 + a55, a53 - a55);
    let a55 = (a55 << 48);
    let (a52, a53) = (a52 + a53, a52 - a53);
    let (a54, a55) = (a54 + a55, a54 - a55);
    let (a60, a62) = (a60 + a62, a60 - a62);
    let (a61, a63) = (a61 + a63, a61 - a63);
    let a63 = (a63 << 48);
    let (a60, a61) = (a60 + a61, a60 - a61);
    let (a62, a63) = (a62 + a63, a62 - a63);
    let (a112, a120) = (a112 + a120, a112 - a120);
    let (a116, a124) = (a116 + a124, a116 - a124);
    let a124 = (a124 << 48);
    let (a112, a116) = (a112 + a116, a112 - a116);
    let (a120, a124) = (a120 + a124, a120 - a124);
    let (a113, a121) = (a113 + a121, a113 - a121);
    let (a117, a125) = (a117 + a125, a117 - a125);
    let a125 = (a125 << 48);
    let (a113, a117) = (a113 + a117, a113 - a117);
    let (a121, a125) = (a121 + a125, a121 - a125);
    let (a114, a122) = (a114 + a122, a114 - a122);
    let (a118, a126) = (a118 + a126, a118 - a126);
    let a126 = (a126 << 48);
    let (a114, a118) = (a114 + a118, a114 - a118);
    let (a122, a126) = (a122 + a126, a122 - a126);
    let (a115, a123) = (a115 + a123, a115 - a123);
    let (a119, a127) = (a119 + a127, a119 - a127);
    let a127 = (a127 << 48);
    let (a115, a119) = (a115 + a119, a115 - a119);
    let (a123, a127) = (a123 + a127, a123 - a127);
    let a121 = (a121 << 12);
    let a117 = (a117 << 24);
    let a125 = (a125 << 36);
    let a122 = (a122 << 24);
    let a118 = (a118 << 48);
    let a126 = (a126 << 72);
    let a123 = (a123 << 36);
    let a119 = (a119 << 72);
    let a127 = (-(a127 << 12));
    let (a112, a114) = (a112 + a114, a112 - a114);
    let (a113, a115) = (a113 + a115, a113 - a115);
    let a115 = (a115 << 48);
    let (a112, a113) = (a112 + a113, a112 - a113);
    let (a114, a115) = (a114 + a115, a114 - a115);
    let (a120, a122) = (a120 + a122, a120 - a122);
    let (a121, a123) = (a121 + a123, a121 - a123);
    let a123 = (a123 << 48);
    let (a120, a121) = (a120 + a121, a120 - a121);
    let (a122, a123) = (a122 + a123, a122 - a123);
    let (a116, a118) = (a116 + a118, a116 - a118);
    let (a117, a119) = (a117 + a119, a117 - a119);
    let a119 = (a119 << 48);
    let (a116, a117) = (a116 + a117, a116 - a117);
    let (a118, a119) = (a118 + a119, a118 - a119);
    let (a124, a126) = (a124 + a126, a124 - a126);
    let (a125, a127) = (a125 + a127, a125 - a127);
    let a127 = (a127 << 48);
    let (a124, a125) = (a124 + a125, a124 - a125);
    let (a126, a127) = (a126 + a127, a126 - a127);
    values[0] = a0;
    values[1] = a64;
    values[2] = a32;
    values[3] = a96;
    values[4] = a16;
    values[5] = a80;
    values[6] = a48;
    values[7] = a112;
    values[8] = a8;
    values[9] = a72;
    values[10] = a40;
    values[11] = a104;
    values[12] = a24;
    values[13] = a88;
    values[14] = a56;
    values[15] = a120;
    values[16] = a4;
    values[17] = a68;
    values[18] = a36;
    values[19] = a100;
    values[20] = a20;
    values[21] = a84;
    values[22] = a52;
    values[23] = a116;
    values[24] = a12;
    values[25] = a76;
    values[26] = a44;
    values[27] = a108;
    values[28] = a28;
    values[29] = a92;
    values[30] = a60;
    values[31] = a124;
    values[32] = a2;
    values[33] = a66;
    values[34] = a34;
    values[35] = a98;
    values[36] = a18;
    values[37] = a82;
    values[38] = a50;
    values[39] = a114;
    values[40] = a10;
    values[41] = a74;
    values[42] = a42;
    values[43] = a106;
    values[44] = a26;
    values[45] = a90;
    values[46] = a58;
    values[47] = a122;
    values[48] = a6;
    values[49] = a70;
    values[50] = a38;
    values[51] = a102;
    values[52] = a22;
    values[53] = a86;
    values[54] = a54;
    values[55] = a118;
    values[56] = a14;
    values[57] = a78;
    values[58] = a46;
    values[59] = a110;
    values[60] = a30;
    values[61] = a94;
    values[62] = a62;
    values[63] = a126;
    values[64] = a1;
    values[65] = a65;
    values[66] = a33;
    values[67] = a97;
    values[68] = a17;
    values[69] = a81;
    values[70] = a49;
    values[71] = a113;
    values[72] = a9;
    values[73] = a73;
    values[74] = a41;
    values[75] = a105;
    values[76] = a25;
    values[77] = a89;
    values[78] = a57;
    values[79] = a121;
    values[80] = a5;
    values[81] = a69;
    values[82] = a37;
    values[83] = a101;
    values[84] = a21;
    values[85] = a85;
    values[86] = a53;
    values[87] = a117;
    values[88] = a13;
    values[89] = a77;
    values[90] = a45;
    values[91] = a109;
    values[92] = a29;
    values[93] = a93;
    values[94] = a61;
    values[95] = a125;
    values[96] = a3;
    values[97] = a67;
    values[98] = a35;
    values[99] = a99;
    values[100] = a19;
    values[101] = a83;
    values[102] = a51;
    values[103] = a115;
    values[104] = a11;
    values[105] = a75;
    values[106] = a43;
    values[107] = a107;
    values[108] = a27;
    values[109] = a91;
    values[110] = a59;
    values[111] = a123;
    values[112] = a7;
    values[113] = a71;
    values[114] = a39;
    values[115] = a103;
    values[116] = a23;
    values[117] = a87;
    values[118] = a55;
    values[119] = a119;
    values[120] = a15;
    values[121] = a79;
    values[122] = a47;
    values[123] = a111;
    values[124] = a31;
    values[125] = a95;
    values[126] = a63;
    values[127] = a127;
}

#[cfg(test)]
mod tests {
    use super::{super::ntt_naive, *};

    #[test]
    fn test_small_ntt() {
        for size in [0, 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 128] {
            let input = (0..size).map(Field::from).collect::<Vec<_>>();
            let mut output = input.clone();
            let supported = small_ntt(output.as_mut_slice());
            assert!(supported);
            let mut output_ref = input;
            ntt_naive(output_ref.as_mut_slice());
            assert_eq!(output, output_ref);
        }
    }


    #[test]
    fn test_ntt_2() {
        let size = 2;
        let input = (0..size).map(Field::from).collect::<Vec<_>>();
        let mut output = input.clone();
        ntt_2(output.as_mut_slice());
        let mut output_ref = input;
        ntt_naive(output_ref.as_mut_slice());
        assert_eq!(output, output_ref);
    }


    #[test]
    fn test_ntt_3() {
        let size = 3;
        let input = (0..size).map(Field::from).collect::<Vec<_>>();
        let mut output = input.clone();
        ntt_3(output.as_mut_slice());
        let mut output_ref = input;
        ntt_naive(output_ref.as_mut_slice());
        assert_eq!(output, output_ref);
    }


    #[test]
    fn test_ntt_4() {
        let size = 4;
        let input = (0..size).map(Field::from).collect::<Vec<_>>();
        let mut output = input.clone();
        ntt_4(output.as_mut_slice());
        let mut output_ref = input;
        ntt_naive(output_ref.as_mut_slice());
        assert_eq!(output, output_ref);
    }


    #[test]
    fn test_ntt_6() {
        let size = 6;
        let input = (0..size).map(Field::from).collect::<Vec<_>>();
        let mut output = input.clone();
        ntt_6(output.as_mut_slice());
        let mut output_ref = input;
        ntt_naive(output_ref.as_mut_slice());
        assert_eq!(output, output_ref);
    }


    #[test]
    fn test_ntt_8() {
        let size = 8;
        let input = (0..size).map(Field::from).collect::<Vec<_>>();
        let mut output = input.clone();
        ntt_8(output.as_mut_slice());
        let mut output_ref = input;
        ntt_naive(output_ref.as_mut_slice());
        assert_eq!(output, output_ref);
    }


    #[test]
    fn test_ntt_12() {
        let size = 12;
        let input = (0..size).map(Field::from).collect::<Vec<_>>();
        let mut output = input.clone();
        ntt_12(output.as_mut_slice());
        let mut output_ref = input;
        ntt_naive(output_ref.as_mut_slice());
        assert_eq!(output, output_ref);
    }


    #[test]
    fn test_ntt_16() {
        let size = 16;
        let input = (0..size).map(Field::from).collect::<Vec<_>>();
        let mut output = input.clone();
        ntt_16(output.as_mut_slice());
        let mut output_ref = input;
        ntt_naive(output_ref.as_mut_slice());
        assert_eq!(output, output_ref);
    }


    #[test]
    fn test_ntt_24() {
        let size = 24;
        let input = (0..size).map(Field::from).collect::<Vec<_>>();
        let mut output = input.clone();
        ntt_24(output.as_mut_slice());
        let mut output_ref = input;
        ntt_naive(output_ref.as_mut_slice());
        assert_eq!(output, output_ref);
    }


    #[test]
    fn test_ntt_32() {
        let size = 32;
        let input = (0..size).map(Field::from).collect::<Vec<_>>();
        let mut output = input.clone();
        ntt_32(output.as_mut_slice());
        let mut output_ref = input;
        ntt_naive(output_ref.as_mut_slice());
        assert_eq!(output, output_ref);
    }


    #[test]
    fn test_ntt_48() {
        let size = 48;
        let input = (0..size).map(Field::from).collect::<Vec<_>>();
        let mut output = input.clone();
        ntt_48(output.as_mut_slice());
        let mut output_ref = input;
        ntt_naive(output_ref.as_mut_slice());
        assert_eq!(output, output_ref);
    }


    #[test]
    fn test_ntt_64() {
        let size = 64;
        let input = (0..size).map(Field::from).collect::<Vec<_>>();
        let mut output = input.clone();
        ntt_64(output.as_mut_slice());
        let mut output_ref = input;
        ntt_naive(output_ref.as_mut_slice());
        assert_eq!(output, output_ref);
    }


    #[test]
    fn test_ntt_96() {
        let size = 96;
        let input = (0..size).map(Field::from).collect::<Vec<_>>();
        let mut output = input.clone();
        ntt_96(output.as_mut_slice());
        let mut output_ref = input;
        ntt_naive(output_ref.as_mut_slice());
        assert_eq!(output, output_ref);
    }


    #[test]
    fn test_ntt_128() {
        let size = 128;
        let input = (0..size).map(Field::from).collect::<Vec<_>>();
        let mut output = input.clone();
        ntt_128(output.as_mut_slice());
        let mut output_ref = input;
        ntt_naive(output_ref.as_mut_slice());
        assert_eq!(output, output_ref);
    }

}
